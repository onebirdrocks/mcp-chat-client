'use client';

import { useState, useEffect } from 'react';
import { Check, X, Play, AlertTriangle, ChevronDown, ChevronUp, Clock, Zap, SkipForward } from 'lucide-react';
import { useTheme } from '@/hooks/useTheme';
import { ToolCall, ToolCallResult } from '@/lib/tool-call-client';

interface InlineToolCallConfirmationProps {
  toolCalls: ToolCall[];
  toolResults?: ToolCallResult[];
  onConfirm: (toolCalls: ToolCall[]) => void;
  onCancel: () => void;
  onExecuteSingle?: (toolCall: ToolCall) => void;
  isWaitingForLLM?: boolean;
}

export default function InlineToolCallConfirmation({ 
  toolCalls, 
  toolResults,
  onConfirm, 
  onCancel,
  onExecuteSingle,
  isWaitingForLLM = false
}: InlineToolCallConfirmationProps) {
  const { isDarkMode } = useTheme();
  const [currentToolIndex, setCurrentToolIndex] = useState(0);
  const [executedTools, setExecutedTools] = useState<Set<string>>(new Set());
  const [executingTools, setExecutingTools] = useState<Set<string>>(new Set());
  const [skippedTools, setSkippedTools] = useState<Set<string>>(new Set());
  const [expandedTools, setExpandedTools] = useState<Set<string>>(new Set());
  const [autoCompleteEnabled, setAutoCompleteEnabled] = useState(true);

  // Ê†πÊçÆÂ∑•ÂÖ∑ÊâßË°åÁªìÊûúÊõ¥Êñ∞Â∑≤ÊâßË°åÂ∑•ÂÖ∑Áä∂ÊÄÅ
  useEffect(() => {
    if (toolResults && toolResults.length > 0) {
      const executedIds = new Set(toolResults.map(result => result.toolCallId));
      setExecutedTools(executedIds);
      
      // ‰ªéÊ≠£Âú®ÊâßË°åÁöÑÂ∑•ÂÖ∑‰∏≠ÁßªÈô§Â∑≤ÂÆåÊàêÁöÑÂ∑•ÂÖ∑
      setExecutingTools(prev => {
        const newSet = new Set(prev);
        executedIds.forEach(id => newSet.delete(id));
        return newSet;
      });
      
      // Â¶ÇÊûúÂΩìÂâçÂ∑•ÂÖ∑Â∑≤ÁªèÊâßË°åÂÆåÊàêÔºåËá™Âä®ÂâçËøõÂà∞‰∏ã‰∏Ä‰∏™Êú™ÊâßË°åÁöÑÂ∑•ÂÖ∑
      const currentTool = toolCalls[currentToolIndex];
      if (currentTool && executedIds.has(currentTool.id)) {
        // ÊâæÂà∞‰∏ã‰∏Ä‰∏™Êú™ÊâßË°åÁöÑÂ∑•ÂÖ∑
        const nextToolIndex = toolCalls.findIndex((tool, index) => 
          index > currentToolIndex && !executedIds.has(tool.id)
        );
        
        if (nextToolIndex !== -1) {
          setCurrentToolIndex(nextToolIndex);
        } else {
          // Â¶ÇÊûúÊ≤°Êúâ‰∏ã‰∏Ä‰∏™Êú™ÊâßË°åÁöÑÂ∑•ÂÖ∑ÔºåËØ¥ÊòéÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩÊâßË°åÂÆåÊàê‰∫Ü
          // Â∞Ü currentToolIndex ËÆæÁΩÆ‰∏∫ -1 Ë°®Á§∫Ê≤°ÊúâÂΩìÂâçÂ∑•ÂÖ∑
          setCurrentToolIndex(-1);
        }
      }
    }
  }, [toolResults, currentToolIndex, toolCalls]);

  // ÂΩìÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩÊúâÁªìÊûúÊó∂ÔºåÁ°Æ‰øùÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩË¢´Ê†áËÆ∞‰∏∫Â∑≤ÊâßË°å
  useEffect(() => {
    if (toolResults && toolResults.length === toolCalls.length) {
      const allToolIds = new Set(toolCalls.map(tool => tool.id));
      setExecutedTools(allToolIds);
      console.log('üîß ÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩÊúâÁªìÊûúÔºåËÆæÁΩÆÊâÄÊúâÂ∑•ÂÖ∑‰∏∫Â∑≤ÊâßË°å:', {
        toolResultsLength: toolResults.length,
        toolCallsLength: toolCalls.length,
        allToolIds: Array.from(allToolIds)
      });
    }
  }, [toolResults, toolCalls]);

  // ÁõëÂê¨ isWaitingForLLM ÁöÑÂèòÂåñ
  useEffect(() => {
    console.log('üîÑ InlineToolCallConfirmation: isWaitingForLLM ÂèòÂåñ‰∏∫:', isWaitingForLLM);
  }, [isWaitingForLLM]);

  // Ëá™Âä®ÂÆåÊàêÈÄªËæëÔºöÂΩìÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩÊâßË°åÂÆåÊàêÊàñË∑≥ËøáÊó∂ÔºåËá™Âä®Ë∞ÉÁî®ÂÆåÊàêÂõûË∞É
  useEffect(() => {
    // ËÆ°ÁÆóÂ∑≤ÂÆåÊàêÁöÑÂ∑•ÂÖ∑Êï∞ÈáèÔºàÂåÖÊã¨ÊâßË°åÊàêÂäüÂíåË∑≥ËøáÁöÑÔºâ
    const completedToolsCount = executedTools.size + skippedTools.size;
    const totalToolsCount = toolCalls.length;
    
    if (autoCompleteEnabled && completedToolsCount === totalToolsCount && totalToolsCount > 0) {
      console.log('üöÄ Ëá™Âä®ÂÆåÊàêËß¶Âèë:', {
        executedToolsSize: executedTools.size,
        skippedToolsSize: skippedTools.size,
        completedToolsCount,
        totalToolsCount,
        autoCompleteEnabled
      });
      
      // Âª∂Ëøü‰∏ÄÁÇπÊó∂Èó¥ËÆ©Áî®Êà∑ÁúãÂà∞ÊâßË°åÂÆåÊàêÁöÑÁä∂ÊÄÅ
      const timer = setTimeout(() => {
        console.log('üöÄ ÊâßË°åËá™Âä®ÂÆåÊàêÂõûË∞É');
        onConfirm(toolCalls);
      }, 1000); // Â¢ûÂä†Âª∂ËøüÊó∂Èó¥ÔºåËÆ©Áî®Êà∑ÁúãÂà∞"ÊâßË°åÊàêÂäü"Áä∂ÊÄÅ
      
      return () => clearTimeout(timer);
    }
  }, [executedTools.size, skippedTools.size, toolCalls.length, autoCompleteEnabled, onConfirm, toolCalls]);

  const handleExecuteCurrent = () => {
    const currentTool = toolCalls[currentToolIndex];
    if (currentTool && onExecuteSingle) {
      // ËÆæÁΩÆÂ∑•ÂÖ∑‰∏∫Ê≠£Âú®ÊâßË°åÁä∂ÊÄÅ
      setExecutingTools(prev => new Set(prev).add(currentTool.id));
      onExecuteSingle(currentTool);
      // Ê≥®ÊÑèÔºöËøôÈáå‰∏çÂÜçÁ´ãÂç≥ËÆæÁΩÆÂ∑•ÂÖ∑‰∏∫Â∑≤ÊâßË°åÔºåËÄåÊòØÁ≠âÂæÖÂÆûÈôÖÁöÑÊâßË°åÁªìÊûú
    }
  };

  const handleExecuteNext = () => {
    if (currentToolIndex < toolCalls.length - 1) {
      setCurrentToolIndex(currentToolIndex + 1);
    } else {
      // ÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩÊâßË°åÂÆåÊØïÔºåË∞ÉÁî®ÂÆåÊàêÂõûË∞É
      onConfirm(toolCalls);
    }
  };

  const handleSkipCurrent = () => {
    const currentTool = toolCalls[currentToolIndex];
    if (currentTool) {
      // Â∞ÜÂΩìÂâçÂ∑•ÂÖ∑Ê†áËÆ∞‰∏∫Ë∑≥Ëøá
      setSkippedTools(prev => new Set(prev).add(currentTool.id));
      // ÂêåÊó∂Ê†áËÆ∞‰∏∫Â∑≤ÊâßË°åÔºåËøôÊ†∑Â∞±‰∏ç‰ºöÂÜçÊòæÁ§∫‰∏∫Á≠âÂæÖÁä∂ÊÄÅ
      setExecutedTools(prev => new Set(prev).add(currentTool.id));
    }
    
    if (currentToolIndex < toolCalls.length - 1) {
      setCurrentToolIndex(currentToolIndex + 1);
    } else {
      // ÊâÄÊúâÂ∑•ÂÖ∑ÈÉΩË∑≥ËøáÔºåË∞ÉÁî®ÂÆåÊàêÂõûË∞É
      onConfirm(toolCalls);
    }
  };

  const handleCancel = () => {
    onCancel();
    setCurrentToolIndex(0);
    setExecutedTools(new Set());
  };

  const toggleToolExpansion = (toolId: string) => {
    setExpandedTools(prev => {
      const newSet = new Set(prev);
      if (newSet.has(toolId)) {
        newSet.delete(toolId);
      } else {
        newSet.add(toolId);
      }
      return newSet;
    });
  };

  const formatArguments = (args: Record<string, unknown>): string => {
    try {
      return JSON.stringify(args, null, 2);
    } catch {
      return String(args);
    }
  };

  const currentTool = toolCalls[currentToolIndex];
  const executedCount = executedTools.size + skippedTools.size; // ÂåÖÊã¨Ë∑≥ËøáÁöÑÂ∑•ÂÖ∑
  const totalCount = toolCalls.length;
  const isLastTool = currentToolIndex === toolCalls.length - 1;
  const allToolsExecuted = executedCount === totalCount;

  // Ëé∑ÂèñÂ∑•ÂÖ∑ÁöÑÊâßË°åÁªìÊûú
  const getToolResult = (toolId: string) => {
    return toolResults?.find(result => result.toolCallId === toolId);
  };

  return (
    <div className={`mt-4 rounded-lg border w-full ${
      isDarkMode 
        ? 'bg-gray-800/50 border-gray-700' 
        : 'bg-gray-50 border-gray-200'
    }`}>
      {/* Header */}
      <div className={`flex items-center justify-between p-4 ${
        isDarkMode ? 'border-gray-700 bg-gray-800/30' : 'border-gray-200 bg-gray-50/50'
      } border-b rounded-t-lg`}>
        <div className="flex items-center gap-3">
          <div className={`p-2 rounded-lg ${
            isDarkMode ? 'bg-blue-600/20 border border-blue-600/30' : 'bg-blue-100 border border-blue-200'
          }`}>
            <Zap className={`w-4 h-4 ${
              isDarkMode ? 'text-blue-400' : 'text-blue-600'
            }`} />
          </div>
          <div>
            <h3 className={`font-semibold text-sm ${
              isDarkMode ? 'text-white' : 'text-gray-900'
            }`}>
              Â∑•ÂÖ∑ÊâßË°å
            </h3>
            <div className="flex items-center gap-2 mt-1">
              <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${
                executedCount === totalCount
                  ? isDarkMode 
                    ? 'bg-green-600/20 text-green-400 border border-green-600/30'
                    : 'bg-green-100 text-green-700 border border-green-200'
                  : isDarkMode
                    ? 'bg-yellow-600/20 text-yellow-400 border border-yellow-600/30'
                    : 'bg-yellow-100 text-yellow-700 border border-yellow-200'
              }`}>
                <span>{executedCount}/{totalCount}</span>
                <span>{executedCount === totalCount ? 'Â∑≤ÂÆåÊàê' : 'ËøõË°å‰∏≠'}</span>
              </div>
              {isWaitingForLLM && (
                <div className={`flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${
                  isDarkMode 
                    ? 'bg-blue-600/20 text-blue-400 border border-blue-600/30'
                    : 'bg-blue-100 text-blue-700 border border-blue-200'
                }`}>
                  <div className="w-2 h-2 bg-current rounded-full animate-pulse"></div>
                  <span>AIÂ§ÑÁêÜ‰∏≠</span>
                </div>
              )}
            </div>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <label className={`flex items-center gap-2 text-xs ${
            isDarkMode ? 'text-gray-400' : 'text-gray-600'
          }`}>
            <input
              type="checkbox"
              checked={autoCompleteEnabled}
              onChange={(e) => setAutoCompleteEnabled(e.target.checked)}
              className="w-3 h-3 rounded"
            />
            Ëá™Âä®ÂÆåÊàê
          </label>
          <button
            onClick={handleCancel}
            className={`px-3 py-1.5 text-xs rounded-md transition-colors ${
              isDarkMode
                ? 'text-gray-400 hover:bg-gray-700 hover:text-gray-300'
                : 'text-gray-600 hover:bg-gray-200 hover:text-gray-800'
            }`}
          >
            ÂèñÊ∂à
          </button>
        </div>
      </div>

      {/* Tools List */}
      <div className="p-4 space-y-3">
        {toolCalls.map((tool, index) => {
          const isCurrent = index === currentToolIndex;
          const isExecuted = executedTools.has(tool.id);
          const isExecuting = executingTools.has(tool.id);
          const isSkipped = skippedTools.has(tool.id);
          const isExpanded = expandedTools.has(tool.id);
          const toolResult = getToolResult(tool.id);
          const isSuccess = toolResult?.success;
          const allToolsCompleted = (executedTools.size + skippedTools.size) === toolCalls.length;
          
          // Ë∞ÉËØï‰ø°ÊÅØ
          const statusText = isExecuting ? 'Ê≠£Âú®ÊâßË°å' : 
            isCurrent && !allToolsCompleted ? 'Á≠âÂæÖÁ°ÆËÆ§ÊâßË°å' : 
            isSkipped ? 'Ë∑≥ËøáÊâßË°å' :
            isExecuted && !isSkipped ? (
              isWaitingForLLM ? 
                (isSuccess ? 'ÊâßË°åÊàêÂäüÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ' : 'ÊâßË°åÂ§±Ë¥•ÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ') :
                (isSuccess ? 'ÊâßË°åÊàêÂäü' : 'ÊâßË°åÂ§±Ë¥•')
            ) : allToolsCompleted && !isSkipped ? (
              isWaitingForLLM ? 'ÊâßË°åÊàêÂäüÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ' : 'ÊâßË°åÊàêÂäü'
            ) : 'Á≠âÂæÖÊâßË°å';
          
          console.log(`üîç Â∑•ÂÖ∑ ${index + 1} (${tool.name}) Áä∂ÊÄÅ:`, {
            isCurrent,
            isExecuted,
            isExecuting,
            isSkipped,
            isSuccess,
            allToolsCompleted,
            executedToolsSize: executedTools.size,
            toolCallsLength: toolCalls.length,
            isWaitingForLLM,
            statusText,
            toolResult: toolResult
          });
          console.log(`üìù Â∑•ÂÖ∑ ${index + 1} statusText: "${statusText}"`);
          console.log(`üîç Â∑•ÂÖ∑ ${index + 1} isWaitingForLLM: ${isWaitingForLLM}`);
          

          
          return (
            <div
              key={tool.id}
              className={`rounded-lg border transition-all duration-200 ${
                isExecuting
                  ? isDarkMode
                    ? 'bg-blue-900/20 border-blue-600/50 shadow-lg shadow-blue-600/10'
                    : 'bg-blue-50 border-blue-200 shadow-lg shadow-blue-200/50'
                  : isCurrent && !allToolsCompleted
                  ? isDarkMode
                    ? 'bg-yellow-900/20 border-yellow-600/50 shadow-lg shadow-yellow-600/10'
                    : 'bg-yellow-50 border-yellow-200 shadow-lg shadow-yellow-200/50'
                  : isSkipped
                  ? isDarkMode
                    ? 'bg-gray-800/20 border-gray-600/50 shadow-lg shadow-gray-600/10'
                    : 'bg-gray-100 border-gray-300 shadow-lg shadow-gray-300/50'
                  : (isExecuted || allToolsCompleted) && !isSkipped
                  ? isSuccess
                    ? isDarkMode
                      ? 'bg-green-900/20 border-green-600/50 shadow-lg shadow-green-600/10'
                      : 'bg-green-50 border-green-200 shadow-lg shadow-green-200/50'
                    : isDarkMode
                      ? 'bg-red-900/20 border-red-600/50 shadow-lg shadow-red-600/10'
                      : 'bg-red-50 border-red-200 shadow-lg shadow-red-200/50'
                  : isDarkMode
                    ? 'bg-gray-700/50 border-gray-600'
                    : 'bg-white border-gray-200'
              }`}
            >
              {/* Tool Header */}
              <div className="flex items-start justify-between p-4">
                <div className="flex items-center gap-3 flex-1 min-w-0">
                  <div className={`w-6 h-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                    isExecuting
                      ? isDarkMode
                        ? 'bg-blue-600 text-white'
                        : 'bg-blue-500 text-white'
                      : isCurrent && !allToolsCompleted
                      ? isDarkMode
                        ? 'bg-yellow-600 text-white'
                        : 'bg-yellow-500 text-white'
                      : isSkipped
                      ? isDarkMode
                        ? 'bg-gray-600 text-gray-300'
                        : 'bg-gray-500 text-gray-600'
                      : (isExecuted || allToolsCompleted) && !isSkipped
                      ? isSuccess
                        ? isDarkMode
                          ? 'bg-green-600 text-white'
                          : 'bg-green-500 text-white'
                        : isDarkMode
                          ? 'bg-red-600 text-white'
                          : 'bg-red-500 text-white'
                      : isDarkMode
                        ? 'bg-gray-600 text-gray-300'
                        : 'bg-gray-400 text-gray-600'
                  }`}>
                    {isExecuting ? (
                      <Clock className="w-3 h-3" />
                    ) : isCurrent && !allToolsCompleted ? (
                      <Play className="w-3 h-3" />
                    ) : isSkipped ? (
                      <SkipForward className="w-3 h-3" />
                    ) : (isExecuted || allToolsCompleted) && !isSkipped ? (
                      isSuccess ? (
                        <Check className="w-3 h-3" />
                      ) : (
                        <X className="w-3 h-3" />
                      )
                    ) : (
                      <span className="text-xs font-medium">{index + 1}</span>
                    )}
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex flex-col gap-1">
                      <div className="flex items-center gap-2">
                        <span className={`text-sm font-medium ${
                          isDarkMode ? 'text-white' : 'text-gray-900'
                        }`}>
                          {tool.name}
                        </span>
                        {tool.serverName && (
                          <span className={`px-2 py-1 rounded-full text-xs font-medium flex-shrink-0 ${
                            tool.serverName === 'ebook-mcp'
                              ? isDarkMode 
                                ? 'bg-purple-600/20 text-purple-400 border border-purple-600/30' 
                                : 'bg-purple-100 text-purple-700 border border-purple-200'
                              : tool.serverName === 'system'
                              ? isDarkMode 
                                ? 'bg-blue-600/20 text-blue-400 border border-blue-600/30' 
                                : 'bg-blue-100 text-blue-700 border border-blue-200'
                              : tool.serverName === 'filesystem'
                              ? isDarkMode 
                                ? 'bg-green-600/20 text-green-400 border border-green-600/30' 
                                : 'bg-green-100 text-green-700 border border-green-200'
                              : isDarkMode 
                                ? 'bg-gray-600/20 text-gray-400 border border-gray-600/30' 
                                : 'bg-gray-200 text-gray-600 border border-gray-300'
                          }`}>
                            {tool.serverName}
                          </span>
                        )}
                      </div>
                      <div className={`text-xs ${
                        isDarkMode ? 'text-gray-400' : 'text-gray-600'
                      }`}>
                        {isExecuting ? 'Ê≠£Âú®ÊâßË°å' : 
                         isCurrent && !allToolsCompleted ? 'Á≠âÂæÖÁ°ÆËÆ§ÊâßË°å' : 
                         isExecuted ? (
                           isWaitingForLLM ? 
                             (isSuccess ? 'ÊâßË°åÊàêÂäüÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ' : 'ÊâßË°åÂ§±Ë¥•ÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ') :
                             (isSuccess ? 'ÊâßË°åÊàêÂäü' : 'ÊâßË°åÂ§±Ë¥•')
                         ) : allToolsCompleted ? (
                           isWaitingForLLM ? 'ÊâßË°åÊàêÂäüÔºåÁ≠âÂæÖAIÂ§ÑÁêÜ' : 'ÊâßË°åÊàêÂäü'
                         ) : 'Á≠âÂæÖÊâßË°å'}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  {isCurrent && !isExecuted && !isExecuting && !allToolsCompleted && (
                    <>
                      <button
                        onClick={handleSkipCurrent}
                        className={`px-3 py-1.5 text-xs rounded-md transition-colors flex items-center gap-1.5 ${
                          isDarkMode
                            ? 'text-gray-400 hover:bg-gray-700 hover:text-gray-300 border border-gray-600'
                            : 'text-gray-600 hover:bg-gray-200 hover:text-gray-800 border border-gray-300'
                        }`}
                      >
                        <SkipForward className="w-3 h-3" />
                        Ë∑≥Ëøá
                      </button>
                      <button
                        onClick={handleExecuteCurrent}
                        className={`px-3 py-1.5 text-xs rounded-md transition-colors flex items-center gap-1.5 ${
                          isDarkMode
                            ? 'bg-blue-600 text-white hover:bg-blue-700'
                            : 'bg-blue-500 text-white hover:bg-blue-600'
                        }`}
                      >
                        <Play className="w-3 h-3" />
                        ÊâßË°å
                      </button>
                    </>
                  )}
                  
                  <button
                    onClick={() => toggleToolExpansion(tool.id)}
                    className={`p-1 rounded transition-colors ${
                      isDarkMode 
                        ? 'hover:bg-gray-700 text-gray-400' 
                        : 'hover:bg-gray-200 text-gray-600'
                    }`}
                  >
                    {isExpanded ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </button>
                </div>
              </div>

              {/* Expanded Content */}
              {isExpanded && (
                <div className={`px-3 pb-3 ${
                  isDarkMode ? 'border-gray-700' : 'border-gray-200'
                } border-t`}>
                  <div className="pt-3">
                    <div className={`text-xs font-medium mb-2 ${
                      isDarkMode ? 'text-gray-300' : 'text-gray-700'
                    }`}>
                      ÂèÇÊï∞
                    </div>
                    <pre className={`text-xs p-2 rounded overflow-auto ${
                      isDarkMode 
                        ? 'bg-gray-800 text-gray-300' 
                        : 'bg-gray-100 text-gray-700'
                    }`}>
                      {formatArguments(tool.arguments)}
                    </pre>
                    
                    {/* ÊòæÁ§∫ÊâßË°åÁªìÊûú */}
                    {isExecuted && toolResult && (
                      <div className="mt-3">
                        <div className={`text-xs font-medium mb-2 ${
                          isSuccess
                            ? isDarkMode ? 'text-green-400' : 'text-green-700'
                            : isDarkMode ? 'text-red-400' : 'text-red-700'
                        }`}>
                          {isSuccess ? 'ÁªìÊûú' : 'ÈîôËØØ'}
                        </div>
                        <pre className={`text-xs p-2 rounded overflow-auto ${
                          isSuccess
                            ? isDarkMode 
                              ? 'bg-green-900/20 text-green-300 border border-green-700/50'
                              : 'bg-green-50 text-green-700 border border-green-200'
                            : isDarkMode 
                              ? 'bg-red-900/20 text-red-300 border border-red-700/50'
                              : 'bg-red-50 text-red-700 border border-red-200'
                        }`}>
                          {isSuccess ? JSON.stringify(toolResult.result, null, 2) : toolResult.error}
                        </pre>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* Actions */}
      <div className={`flex items-center justify-between p-3 ${
        isDarkMode ? 'border-gray-700' : 'border-gray-200'
      } border-t`}>
        <div className="flex items-center gap-2">
          {/* ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ÂÖ∂‰ªñÊìç‰ΩúÊåâÈíÆ */}
        </div>
        
        <div className="flex items-center gap-2">
          {/* ÊâãÂä®ÂÆåÊàêÊåâÈíÆ - ÂΩìËá™Âä®ÂÆåÊàêÂÖ≥Èó≠ÊàñÈúÄË¶ÅÊâãÂä®ÊéßÂà∂Êó∂ÊòæÁ§∫ */}
          {(!autoCompleteEnabled || allToolsExecuted) && (
            <button
              onClick={() => onConfirm(toolCalls)}
              className={`px-3 py-1.5 text-xs rounded-md transition-colors flex items-center gap-1.5 ${
                isDarkMode
                  ? 'bg-green-600 text-white hover:bg-green-700'
                  : 'bg-green-500 text-white hover:bg-green-600'
              }`}
            >
              <Check className="w-3 h-3" />
              ÂÆåÊàê
            </button>
          )}
        </div>
      </div>
    </div>
  );
}
