/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat-history/route";
exports.ids = ["app/api/chat-history/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat-history%2Froute&page=%2Fapi%2Fchat-history%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-history%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat-history%2Froute&page=%2Fapi%2Fchat-history%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-history%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_chat_history_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/chat-history/route.ts */ \"(rsc)/./src/app/api/chat-history/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat-history/route\",\n        pathname: \"/api/chat-history\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat-history/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/onebird/github/ebook-mcp/mcp-chat-ui/backend/src/app/api/chat-history/route.ts\",\n    nextConfigOutput,\n    userland: _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_chat_history_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/chat-history/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat-history%2Froute&page=%2Fapi%2Fchat-history%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-history%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/chat-history/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/chat-history/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DELETE: () => (/* binding */ DELETE),\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_cors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/cors */ \"(rsc)/./src/lib/cors.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _services_SessionManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/services/SessionManager */ \"(rsc)/./src/services/SessionManager.ts\");\n/* harmony import */ var _lib_startup__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/startup */ \"(rsc)/./src/lib/startup.ts\");\n\n\n\n\n\nasync function getChatHistoryHandler(request) {\n    await (0,_lib_startup__WEBPACK_IMPORTED_MODULE_4__.ensureInitialized)();\n    const url = new URL(request.url);\n    const limit = parseInt(url.searchParams.get('limit') || '50');\n    const offset = parseInt(url.searchParams.get('offset') || '0');\n    const query = url.searchParams.get('query') || undefined;\n    const provider = url.searchParams.get('provider') || undefined;\n    const sortBy = url.searchParams.get('sortBy') || 'updatedAt';\n    const sortOrder = url.searchParams.get('sortOrder') || 'desc';\n    // Validate parameters\n    if (limit < 1 || limit > 100) {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Limit must be between 1 and 100');\n    }\n    if (offset < 0) {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Offset must be non-negative');\n    }\n    const sessionManager = (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_3__.getSessionManager)();\n    const result = await sessionManager.searchSessions({\n        query,\n        provider,\n        limit,\n        offset,\n        sortBy,\n        sortOrder\n    });\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        sessions: result.sessions,\n        total: result.total,\n        hasMore: result.hasMore\n    });\n}\nasync function deleteChatHistoryHandler(request) {\n    await (0,_lib_startup__WEBPACK_IMPORTED_MODULE_4__.ensureInitialized)();\n    const url = new URL(request.url);\n    const sessionId = url.searchParams.get('sessionId');\n    if (!sessionId) {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Missing sessionId parameter');\n    }\n    const sessionManager = (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_3__.getSessionManager)();\n    await sessionManager.deleteSession(sessionId);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        success: true\n    });\n}\nasync function updateChatHistoryHandler(request) {\n    await (0,_lib_startup__WEBPACK_IMPORTED_MODULE_4__.ensureInitialized)();\n    const url = new URL(request.url);\n    const sessionId = url.searchParams.get('sessionId');\n    if (!sessionId) {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Missing sessionId parameter');\n    }\n    const body = await request.json();\n    const { title } = body;\n    if (!title || typeof title !== 'string') {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Title must be a non-empty string');\n    }\n    const sessionManager = (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_3__.getSessionManager)();\n    const updatedSession = await sessionManager.updateSession(sessionId, {\n        title\n    });\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        id: updatedSession.id,\n        title: updatedSession.title,\n        updatedAt: updatedSession.updatedAt.toISOString()\n    });\n}\nconst GET = (0,_lib_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.handleAsyncRoute)(getChatHistoryHandler));\nconst DELETE = (0,_lib_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.handleAsyncRoute)(deleteChatHistoryHandler));\nconst PUT = (0,_lib_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.handleAsyncRoute)(updateChatHistoryHandler));\nconst OPTIONS = (0,_lib_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)(async ()=>new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200\n    }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jaGF0LWhpc3Rvcnkvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ0w7QUFDMkI7QUFFSDtBQUNaO0FBRWxELGVBQWVNLHNCQUFzQkMsT0FBZ0I7SUFDbkQsTUFBTUYsK0RBQWlCQTtJQUV2QixNQUFNRyxNQUFNLElBQUlDLElBQUlGLFFBQVFDLEdBQUc7SUFDL0IsTUFBTUUsUUFBUUMsU0FBU0gsSUFBSUksWUFBWSxDQUFDQyxHQUFHLENBQUMsWUFBWTtJQUN4RCxNQUFNQyxTQUFTSCxTQUFTSCxJQUFJSSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxhQUFhO0lBQzFELE1BQU1FLFFBQVFQLElBQUlJLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLFlBQVlHO0lBQy9DLE1BQU1DLFdBQVdULElBQUlJLFlBQVksQ0FBQ0MsR0FBRyxDQUFDLGVBQThCRztJQUNwRSxNQUFNRSxTQUFTVixJQUFJSSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxhQUFvRDtJQUN4RixNQUFNTSxZQUFZWCxJQUFJSSxZQUFZLENBQUNDLEdBQUcsQ0FBQyxnQkFBa0M7SUFFekUsc0JBQXNCO0lBQ3RCLElBQUlILFFBQVEsS0FBS0EsUUFBUSxLQUFLO1FBQzVCLE1BQU0sSUFBSVAsd0RBQWVBLENBQUM7SUFDNUI7SUFDQSxJQUFJVyxTQUFTLEdBQUc7UUFDZCxNQUFNLElBQUlYLHdEQUFlQSxDQUFDO0lBQzVCO0lBRUEsTUFBTWlCLGlCQUFpQmhCLDJFQUFpQkE7SUFDeEMsTUFBTWlCLFNBQVMsTUFBTUQsZUFBZUUsY0FBYyxDQUFDO1FBQ2pEUDtRQUNBRTtRQUNBUDtRQUNBSTtRQUNBSTtRQUNBQztJQUNGO0lBRUEsT0FBT25CLHFEQUFZQSxDQUFDdUIsSUFBSSxDQUFDO1FBQ3ZCQyxVQUFVSCxPQUFPRyxRQUFRO1FBQ3pCQyxPQUFPSixPQUFPSSxLQUFLO1FBQ25CQyxTQUFTTCxPQUFPSyxPQUFPO0lBQ3pCO0FBQ0Y7QUFFQSxlQUFlQyx5QkFBeUJwQixPQUFnQjtJQUN0RCxNQUFNRiwrREFBaUJBO0lBRXZCLE1BQU1HLE1BQU0sSUFBSUMsSUFBSUYsUUFBUUMsR0FBRztJQUMvQixNQUFNb0IsWUFBWXBCLElBQUlJLFlBQVksQ0FBQ0MsR0FBRyxDQUFDO0lBRXZDLElBQUksQ0FBQ2UsV0FBVztRQUNkLE1BQU0sSUFBSXpCLHdEQUFlQSxDQUFDO0lBQzVCO0lBRUEsTUFBTWlCLGlCQUFpQmhCLDJFQUFpQkE7SUFDeEMsTUFBTWdCLGVBQWVTLGFBQWEsQ0FBQ0Q7SUFFbkMsT0FBTzVCLHFEQUFZQSxDQUFDdUIsSUFBSSxDQUFDO1FBQUVPLFNBQVM7SUFBSztBQUMzQztBQUVBLGVBQWVDLHlCQUF5QnhCLE9BQWdCO0lBQ3RELE1BQU1GLCtEQUFpQkE7SUFFdkIsTUFBTUcsTUFBTSxJQUFJQyxJQUFJRixRQUFRQyxHQUFHO0lBQy9CLE1BQU1vQixZQUFZcEIsSUFBSUksWUFBWSxDQUFDQyxHQUFHLENBQUM7SUFFdkMsSUFBSSxDQUFDZSxXQUFXO1FBQ2QsTUFBTSxJQUFJekIsd0RBQWVBLENBQUM7SUFDNUI7SUFFQSxNQUFNNkIsT0FBTyxNQUFNekIsUUFBUWdCLElBQUk7SUFDL0IsTUFBTSxFQUFFVSxLQUFLLEVBQUUsR0FBR0Q7SUFFbEIsSUFBSSxDQUFDQyxTQUFTLE9BQU9BLFVBQVUsVUFBVTtRQUN2QyxNQUFNLElBQUk5Qix3REFBZUEsQ0FBQztJQUM1QjtJQUVBLE1BQU1pQixpQkFBaUJoQiwyRUFBaUJBO0lBQ3hDLE1BQU04QixpQkFBaUIsTUFBTWQsZUFBZWUsYUFBYSxDQUFDUCxXQUFXO1FBQUVLO0lBQU07SUFFN0UsT0FBT2pDLHFEQUFZQSxDQUFDdUIsSUFBSSxDQUFDO1FBQ3ZCYSxJQUFJRixlQUFlRSxFQUFFO1FBQ3JCSCxPQUFPQyxlQUFlRCxLQUFLO1FBQzNCSSxXQUFXSCxlQUFlRyxTQUFTLENBQUNDLFdBQVc7SUFDakQ7QUFDRjtBQUVPLE1BQU1DLE1BQU10QyxtREFBUUEsQ0FBQ0MsNkRBQWdCQSxDQUFDSSx3QkFBd0I7QUFDOUQsTUFBTWtDLFNBQVN2QyxtREFBUUEsQ0FBQ0MsNkRBQWdCQSxDQUFDeUIsMkJBQTJCO0FBQ3BFLE1BQU1jLE1BQU14QyxtREFBUUEsQ0FBQ0MsNkRBQWdCQSxDQUFDNkIsMkJBQTJCO0FBQ2pFLE1BQU1XLFVBQVV6QyxtREFBUUEsQ0FBQyxVQUFZLElBQUlELHFEQUFZQSxDQUFDLE1BQU07UUFBRTJDLFFBQVE7SUFBSSxJQUFJIiwic291cmNlcyI6WyIvVXNlcnMvb25lYmlyZC9naXRodWIvZWJvb2stbWNwL21jcC1jaGF0LXVpL2JhY2tlbmQvc3JjL2FwcC9hcGkvY2hhdC1oaXN0b3J5L3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IHdpdGhDb3JzIH0gZnJvbSAnQC9saWIvY29ycyc7XG5pbXBvcnQgeyBoYW5kbGVBc3luY1JvdXRlLCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICdAL2xpYi9lcnJvcnMnO1xuaW1wb3J0IHsgQ2hhdEhpc3RvcnlSZXNwb25zZSwgQ2hhdFNlc3Npb25TdW1tYXJ5LCBMTE1Qcm92aWRlciB9IGZyb20gJ0AvdHlwZXMnO1xuaW1wb3J0IHsgZ2V0U2Vzc2lvbk1hbmFnZXIgfSBmcm9tICdAL3NlcnZpY2VzL1Nlc3Npb25NYW5hZ2VyJztcbmltcG9ydCB7IGVuc3VyZUluaXRpYWxpemVkIH0gZnJvbSAnQC9saWIvc3RhcnR1cCc7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldENoYXRIaXN0b3J5SGFuZGxlcihyZXF1ZXN0OiBSZXF1ZXN0KTogUHJvbWlzZTxOZXh0UmVzcG9uc2U+IHtcbiAgYXdhaXQgZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgXG4gIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICBjb25zdCBsaW1pdCA9IHBhcnNlSW50KHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdsaW1pdCcpIHx8ICc1MCcpO1xuICBjb25zdCBvZmZzZXQgPSBwYXJzZUludCh1cmwuc2VhcmNoUGFyYW1zLmdldCgnb2Zmc2V0JykgfHwgJzAnKTtcbiAgY29uc3QgcXVlcnkgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgncXVlcnknKSB8fCB1bmRlZmluZWQ7XG4gIGNvbnN0IHByb3ZpZGVyID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Byb3ZpZGVyJykgYXMgTExNUHJvdmlkZXIgfHwgdW5kZWZpbmVkO1xuICBjb25zdCBzb3J0QnkgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnc29ydEJ5JykgYXMgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd0aXRsZScgfHwgJ3VwZGF0ZWRBdCc7XG4gIGNvbnN0IHNvcnRPcmRlciA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdzb3J0T3JkZXInKSBhcyAnYXNjJyB8ICdkZXNjJyB8fCAnZGVzYyc7XG5cbiAgLy8gVmFsaWRhdGUgcGFyYW1ldGVyc1xuICBpZiAobGltaXQgPCAxIHx8IGxpbWl0ID4gMTAwKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignTGltaXQgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMCcpO1xuICB9XG4gIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignT2Zmc2V0IG11c3QgYmUgbm9uLW5lZ2F0aXZlJyk7XG4gIH1cblxuICBjb25zdCBzZXNzaW9uTWFuYWdlciA9IGdldFNlc3Npb25NYW5hZ2VyKCk7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlc3Npb25NYW5hZ2VyLnNlYXJjaFNlc3Npb25zKHtcbiAgICBxdWVyeSxcbiAgICBwcm92aWRlcixcbiAgICBsaW1pdCxcbiAgICBvZmZzZXQsXG4gICAgc29ydEJ5LFxuICAgIHNvcnRPcmRlcixcbiAgfSk7XG5cbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICBzZXNzaW9uczogcmVzdWx0LnNlc3Npb25zLFxuICAgIHRvdGFsOiByZXN1bHQudG90YWwsXG4gICAgaGFzTW9yZTogcmVzdWx0Lmhhc01vcmUsXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVDaGF0SGlzdG9yeUhhbmRsZXIocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIGF3YWl0IGVuc3VyZUluaXRpYWxpemVkKCk7XG4gIFxuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3Qgc2Vzc2lvbklkID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Nlc3Npb25JZCcpO1xuXG4gIGlmICghc2Vzc2lvbklkKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignTWlzc2luZyBzZXNzaW9uSWQgcGFyYW1ldGVyJyk7XG4gIH1cblxuICBjb25zdCBzZXNzaW9uTWFuYWdlciA9IGdldFNlc3Npb25NYW5hZ2VyKCk7XG4gIGF3YWl0IHNlc3Npb25NYW5hZ2VyLmRlbGV0ZVNlc3Npb24oc2Vzc2lvbklkKTtcblxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVDaGF0SGlzdG9yeUhhbmRsZXIocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIGF3YWl0IGVuc3VyZUluaXRpYWxpemVkKCk7XG4gIFxuICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgY29uc3Qgc2Vzc2lvbklkID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3Nlc3Npb25JZCcpO1xuXG4gIGlmICghc2Vzc2lvbklkKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignTWlzc2luZyBzZXNzaW9uSWQgcGFyYW1ldGVyJyk7XG4gIH1cblxuICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gIGNvbnN0IHsgdGl0bGUgfSA9IGJvZHk7XG5cbiAgaWYgKCF0aXRsZSB8fCB0eXBlb2YgdGl0bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignVGl0bGUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgfVxuXG4gIGNvbnN0IHNlc3Npb25NYW5hZ2VyID0gZ2V0U2Vzc2lvbk1hbmFnZXIoKTtcbiAgY29uc3QgdXBkYXRlZFNlc3Npb24gPSBhd2FpdCBzZXNzaW9uTWFuYWdlci51cGRhdGVTZXNzaW9uKHNlc3Npb25JZCwgeyB0aXRsZSB9KTtcblxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgIGlkOiB1cGRhdGVkU2Vzc2lvbi5pZCxcbiAgICB0aXRsZTogdXBkYXRlZFNlc3Npb24udGl0bGUsXG4gICAgdXBkYXRlZEF0OiB1cGRhdGVkU2Vzc2lvbi51cGRhdGVkQXQudG9JU09TdHJpbmcoKSxcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBHRVQgPSB3aXRoQ29ycyhoYW5kbGVBc3luY1JvdXRlKGdldENoYXRIaXN0b3J5SGFuZGxlcikpO1xuZXhwb3J0IGNvbnN0IERFTEVURSA9IHdpdGhDb3JzKGhhbmRsZUFzeW5jUm91dGUoZGVsZXRlQ2hhdEhpc3RvcnlIYW5kbGVyKSk7XG5leHBvcnQgY29uc3QgUFVUID0gd2l0aENvcnMoaGFuZGxlQXN5bmNSb3V0ZSh1cGRhdGVDaGF0SGlzdG9yeUhhbmRsZXIpKTtcbmV4cG9ydCBjb25zdCBPUFRJT05TID0gd2l0aENvcnMoYXN5bmMgKCkgPT4gbmV3IE5leHRSZXNwb25zZShudWxsLCB7IHN0YXR1czogMjAwIH0pKTsiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwid2l0aENvcnMiLCJoYW5kbGVBc3luY1JvdXRlIiwiVmFsaWRhdGlvbkVycm9yIiwiZ2V0U2Vzc2lvbk1hbmFnZXIiLCJlbnN1cmVJbml0aWFsaXplZCIsImdldENoYXRIaXN0b3J5SGFuZGxlciIsInJlcXVlc3QiLCJ1cmwiLCJVUkwiLCJsaW1pdCIsInBhcnNlSW50Iiwic2VhcmNoUGFyYW1zIiwiZ2V0Iiwib2Zmc2V0IiwicXVlcnkiLCJ1bmRlZmluZWQiLCJwcm92aWRlciIsInNvcnRCeSIsInNvcnRPcmRlciIsInNlc3Npb25NYW5hZ2VyIiwicmVzdWx0Iiwic2VhcmNoU2Vzc2lvbnMiLCJqc29uIiwic2Vzc2lvbnMiLCJ0b3RhbCIsImhhc01vcmUiLCJkZWxldGVDaGF0SGlzdG9yeUhhbmRsZXIiLCJzZXNzaW9uSWQiLCJkZWxldGVTZXNzaW9uIiwic3VjY2VzcyIsInVwZGF0ZUNoYXRIaXN0b3J5SGFuZGxlciIsImJvZHkiLCJ0aXRsZSIsInVwZGF0ZWRTZXNzaW9uIiwidXBkYXRlU2Vzc2lvbiIsImlkIiwidXBkYXRlZEF0IiwidG9JU09TdHJpbmciLCJHRVQiLCJERUxFVEUiLCJQVVQiLCJPUFRJT05TIiwic3RhdHVzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat-history/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cors.ts":
/*!*************************!*\
  !*** ./src/lib/cors.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   corsHeaders: () => (/* binding */ corsHeaders),\n/* harmony export */   getSecurityHeaders: () => (/* binding */ getSecurityHeaders),\n/* harmony export */   handleCors: () => (/* binding */ handleCors),\n/* harmony export */   withCors: () => (/* binding */ withCors)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Development: Allow localhost with any port\n// Production: Use specific allowed origins\nconst isDevelopment = \"development\" !== 'production';\nconst LOCALHOST_PATTERN = /^http:\\/\\/localhost:\\d+$/;\nconst ALLOWED_PORTS = [\n    3000,\n    4173,\n    5173,\n    5174,\n    5175,\n    5176,\n    5177,\n    5178,\n    5179,\n    8080\n]; // Common dev ports\nconst PRODUCTION_ORIGINS = [\n    'https://your-domain.com'\n];\nfunction corsHeaders(origin) {\n    let allowedOrigin;\n    console.log('🔍 CORS Debug - Received origin:', origin, 'isDevelopment:', isDevelopment);\n    if (isDevelopment) {\n        // In development, always use the provided origin if it's localhost\n        if (origin && (origin.includes('localhost') || origin.includes('127.0.0.1'))) {\n            allowedOrigin = origin;\n            console.log('✅ CORS Debug - Using provided localhost origin:', allowedOrigin);\n        } else if (origin) {\n            // For any other origin in development, still allow it\n            allowedOrigin = origin;\n            console.log('✅ CORS Debug - Using provided origin:', allowedOrigin);\n        } else {\n            // No origin provided, use wildcard for development\n            allowedOrigin = '*';\n            console.log('⚠️ CORS Debug - No origin provided, using wildcard for development');\n        }\n    } else {\n        // In production, use strict origin checking\n        if (origin && PRODUCTION_ORIGINS.includes(origin)) {\n            allowedOrigin = origin;\n        } else {\n            allowedOrigin = PRODUCTION_ORIGINS[0] || 'http://localhost:5173';\n        }\n    }\n    const headers = {\n        // CORS headers\n        'Access-Control-Allow-Origin': allowedOrigin,\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Max-Age': '86400'\n    };\n    // Add security headers if enabled\n    if (process.env.SECURITY_HEADERS_ENABLED !== 'false') {\n        Object.assign(headers, getSecurityHeaders());\n    }\n    return headers;\n}\nfunction getSecurityHeaders() {\n    return {\n        // Prevent XSS attacks\n        'X-XSS-Protection': '1; mode=block',\n        // Prevent MIME type sniffing\n        'X-Content-Type-Options': 'nosniff',\n        // Prevent clickjacking\n        'X-Frame-Options': 'DENY',\n        // Referrer policy\n        'Referrer-Policy': 'strict-origin-when-cross-origin',\n        // Content Security Policy (restrictive for API)\n        'Content-Security-Policy': \"default-src 'none'; frame-ancestors 'none';\",\n        // Permissions policy\n        'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()',\n        // HSTS (only in production with HTTPS)\n        ... false && 0\n    };\n}\nfunction handleCors(request) {\n    const origin = request.headers.get('origin');\n    return corsHeaders(origin || undefined);\n}\nfunction withCors(handler) {\n    return async (request, context)=>{\n        // Convert Request to NextRequest for CORS handling\n        const nextRequest = request;\n        const corsHeadersObj = handleCors(nextRequest);\n        if (request.method === 'OPTIONS') {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n                status: 200,\n                headers: corsHeadersObj\n            });\n        }\n        try {\n            const response = await handler(request, context);\n            // Add CORS headers to the response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        } catch (error) {\n            console.error('CORS Handler Error:', error);\n            // Return proper JSON error response\n            const statusCode = error instanceof Error && 'statusCode' in error ? error.statusCode : 500;\n            const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error instanceof Error ? error.name : 'Error',\n                message: errorMessage,\n                statusCode\n            }, {\n                status: statusCode\n            });\n            // Add CORS headers to error response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/encryption.ts":
/*!*******************************!*\
  !*** ./src/lib/encryption.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService),\n/* harmony export */   getEncryptionService: () => (/* binding */ getEncryptionService)\n/* harmony export */ });\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n/**\n * Encryption utility for securing sensitive data like API keys\n */ class EncryptionService {\n    constructor(){\n        // Get encryption key from environment or generate a default one\n        this.secretKey = process.env.ENCRYPTION_KEY || this.generateDefaultKey();\n        if (!process.env.ENCRYPTION_KEY) {\n            console.warn('ENCRYPTION_KEY not set in environment. Using generated key. This is not secure for production!');\n        }\n    }\n    /**\n   * Encrypt sensitive data\n   */ encrypt(data) {\n        try {\n            if (!data) return '';\n            const encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.encrypt(data, this.secretKey).toString();\n            return encrypted;\n        } catch (error) {\n            console.error('Encryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to encrypt data');\n        }\n    }\n    /**\n   * Decrypt sensitive data\n   */ decrypt(encryptedData) {\n        try {\n            if (!encryptedData) return '';\n            const bytes = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.decrypt(encryptedData, this.secretKey);\n            const decrypted = bytes.toString((crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc).Utf8);\n            if (!decrypted) {\n                throw new Error('Failed to decrypt data - invalid key or corrupted data');\n            }\n            return decrypted;\n        } catch (error) {\n            console.error('Decryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to decrypt data');\n        }\n    }\n    /**\n   * Hash data for secure comparison (one-way)\n   */ hash(data) {\n        try {\n            return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(data).toString();\n        } catch (error) {\n            console.error('Hashing failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to hash data');\n        }\n    }\n    /**\n   * Generate a secure random key\n   */ generateSecureKey() {\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().lib.WordArray.random(256 / 8).toString();\n    }\n    /**\n   * Mask sensitive data for display (show only last 4 characters with limited mask length)\n   */ maskApiKey(apiKey) {\n        if (!apiKey || apiKey.length < 8) {\n            return '••••';\n        }\n        const visibleChars = 4;\n        const maxMaskLength = 8; // Limit mask length to prevent UI overflow\n        const actualMaskLength = Math.min(maxMaskLength, Math.max(0, apiKey.length - visibleChars));\n        const maskedPart = '•'.repeat(actualMaskLength);\n        const visiblePart = apiKey.slice(-visibleChars);\n        return maskedPart + visiblePart;\n    }\n    /**\n   * Validate if a string appears to be encrypted\n   */ isEncrypted(data) {\n        try {\n            // Try to decrypt - if it fails, it's likely not encrypted\n            this.decrypt(data);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    generateDefaultKey() {\n        // Generate a consistent but unique key based on system info\n        // This is NOT secure for production - should use proper environment variable\n        const systemInfo = process.platform + process.arch + (process.env.HOME || process.env.USERPROFILE || 'default');\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(systemInfo + 'mcp-chat-ui-default-key').toString();\n    }\n}\n// Singleton instance\nlet encryptionService = null;\nfunction getEncryptionService() {\n    if (!encryptionService) {\n        encryptionService = new EncryptionService();\n    }\n    return encryptionService;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/encryption.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   ToolExecutionError: () => (/* binding */ ToolExecutionError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   handleAsyncRoute: () => (/* binding */ handleAsyncRoute)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nclass AppError extends Error {\n    constructor(message, statusCode = 500, isOperational = true){\n        super(message);\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nclass ValidationError extends AppError {\n    constructor(message){\n        super(message, 400);\n    }\n}\nclass NotFoundError extends AppError {\n    constructor(message = 'Resource not found'){\n        super(message, 404);\n    }\n}\nclass UnauthorizedError extends AppError {\n    constructor(message = 'Unauthorized'){\n        super(message, 401);\n    }\n}\nclass InternalServerError extends AppError {\n    constructor(message = 'Internal server error'){\n        super(message, 500);\n    }\n}\nclass ToolExecutionError extends AppError {\n    constructor(message, statusCode = 500){\n        super(message, statusCode);\n    }\n}\nfunction createErrorResponse(error) {\n    console.error('API Error:', error);\n    if (error instanceof AppError) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.constructor.name,\n            message: error.message,\n            statusCode: error.statusCode\n        }, {\n            status: error.statusCode\n        });\n    }\n    if (error instanceof Error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'InternalServerError',\n            message: error.message,\n            statusCode: 500\n        }, {\n            status: 500\n        });\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'UnknownError',\n        message: 'An unknown error occurred',\n        statusCode: 500\n    }, {\n        status: 500\n    });\n}\nfunction handleAsyncRoute(handler) {\n    return async (request, context)=>{\n        try {\n            return await handler(request, context);\n        } catch (error) {\n            return createErrorResponse(error);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd0Q7QUFHakQsTUFBTUMsaUJBQWlCQztJQUk1QixZQUFZQyxPQUFlLEVBQUVDLGFBQXFCLEdBQUcsRUFBRUMsZ0JBQXlCLElBQUksQ0FBRTtRQUNwRixLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUVyQkgsTUFBTUksaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO0lBQ2hEO0FBQ0Y7QUFFTyxNQUFNQyx3QkFBd0JOO0lBQ25DLFlBQVlFLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1LLHNCQUFzQlA7SUFDakMsWUFBWUUsVUFBa0Isb0JBQW9CLENBQUU7UUFDbEQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNTSwwQkFBMEJSO0lBQ3JDLFlBQVlFLFVBQWtCLGNBQWMsQ0FBRTtRQUM1QyxLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1PLDRCQUE0QlQ7SUFDdkMsWUFBWUUsVUFBa0IsdUJBQXVCLENBQUU7UUFDckQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNUSwyQkFBMkJWO0lBQ3RDLFlBQVlFLE9BQWUsRUFBRUMsYUFBcUIsR0FBRyxDQUFFO1FBQ3JELEtBQUssQ0FBQ0QsU0FBU0M7SUFDakI7QUFDRjtBQUVPLFNBQVNRLG9CQUFvQkMsS0FBYztJQUNoREMsUUFBUUQsS0FBSyxDQUFDLGNBQWNBO0lBRTVCLElBQUlBLGlCQUFpQlosVUFBVTtRQUM3QixPQUFPRCxxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPQSxNQUFNLFdBQVcsQ0FBQ0csSUFBSTtZQUM3QmIsU0FBU1UsTUFBTVYsT0FBTztZQUN0QkMsWUFBWVMsTUFBTVQsVUFBVTtRQUM5QixHQUNBO1lBQUVhLFFBQVFKLE1BQU1ULFVBQVU7UUFBQztJQUUvQjtJQUVBLElBQUlTLGlCQUFpQlgsT0FBTztRQUMxQixPQUFPRixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPO1lBQ1BWLFNBQVNVLE1BQU1WLE9BQU87WUFDdEJDLFlBQVk7UUFDZCxHQUNBO1lBQUVhLFFBQVE7UUFBSTtJQUVsQjtJQUVBLE9BQU9qQixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtRQUNFRixPQUFPO1FBQ1BWLFNBQVM7UUFDVEMsWUFBWTtJQUNkLEdBQ0E7UUFBRWEsUUFBUTtJQUFJO0FBRWxCO0FBRU8sU0FBU0MsaUJBQ2RDLE9BQW1FO0lBRW5FLE9BQU8sT0FBT0MsU0FBa0JDO1FBQzlCLElBQUk7WUFDRixPQUFPLE1BQU1GLFFBQVFDLFNBQVNDO1FBQ2hDLEVBQUUsT0FBT1IsT0FBTztZQUNkLE9BQU9ELG9CQUFvQkM7UUFDN0I7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvb25lYmlyZC9naXRodWIvZWJvb2stbWNwL21jcC1jaGF0LXVpL2JhY2tlbmQvc3JjL2xpYi9lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IEFwaUVycm9yIH0gZnJvbSAnQC90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgcHVibGljIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDAsIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsO1xuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDAwKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1Jlc291cmNlIG5vdCBmb3VuZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1VuYXV0aG9yaXplZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDEpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSAnSW50ZXJuYWwgc2VydmVyIGVycm9yJykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDUwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2xFeGVjdXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDApIHtcbiAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXNDb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZShlcnJvcjogdW5rbm93bik6IE5leHRSZXNwb25zZTxBcGlFcnJvcj4ge1xuICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3I6JywgZXJyb3IpO1xuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwcEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzQ29kZSxcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogZXJyb3Iuc3RhdHVzQ29kZSB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsU2VydmVyRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICB7XG4gICAgICBlcnJvcjogJ1Vua25vd25FcnJvcicsXG4gICAgICBtZXNzYWdlOiAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCcsXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgfSxcbiAgICB7IHN0YXR1czogNTAwIH1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUFzeW5jUm91dGUoXG4gIGhhbmRsZXI6IChyZXF1ZXN0OiBSZXF1ZXN0LCBjb250ZXh0PzogYW55KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT5cbikge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3Q6IFJlcXVlc3QsIGNvbnRleHQ/OiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIocmVxdWVzdCwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGVycm9yKTtcbiAgICB9XG4gIH07XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkFwcEVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzQ29kZSIsImlzT3BlcmF0aW9uYWwiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIlZhbGlkYXRpb25FcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJVbmF1dGhvcml6ZWRFcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJUb29sRXhlY3V0aW9uRXJyb3IiLCJjcmVhdGVFcnJvclJlc3BvbnNlIiwiZXJyb3IiLCJjb25zb2xlIiwianNvbiIsIm5hbWUiLCJzdGF0dXMiLCJoYW5kbGVBc3luY1JvdXRlIiwiaGFuZGxlciIsInJlcXVlc3QiLCJjb250ZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/startup.ts":
/*!****************************!*\
  !*** ./src/lib/startup.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureInitialized: () => (/* binding */ ensureInitialized),\n/* harmony export */   initializeBackend: () => (/* binding */ initializeBackend)\n/* harmony export */ });\n/* harmony import */ var _services_SessionManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/services/SessionManager */ \"(rsc)/./src/services/SessionManager.ts\");\n\nlet isInitialized = false;\n/**\n * Initialize all backend services\n */ async function initializeBackend() {\n    if (isInitialized) {\n        return;\n    }\n    try {\n        console.log('Initializing backend services...');\n        // Initialize session manager\n        await (0,_services_SessionManager__WEBPACK_IMPORTED_MODULE_0__.initializeSessionManager)();\n        console.log('✓ Session manager initialized');\n        isInitialized = true;\n        console.log('✓ Backend initialization complete');\n    } catch (error) {\n        console.error('❌ Backend initialization failed:', error);\n        throw error;\n    }\n}\n/**\n * Ensure backend is initialized before handling requests\n */ async function ensureInitialized() {\n    if (!isInitialized) {\n        await initializeBackend();\n    }\n}\n// Initialize on module load in production\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N0YXJ0dXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFFO0FBRXJFLElBQUlDLGdCQUFnQjtBQUVwQjs7Q0FFQyxHQUNNLGVBQWVDO0lBQ3BCLElBQUlELGVBQWU7UUFDakI7SUFDRjtJQUVBLElBQUk7UUFDRkUsUUFBUUMsR0FBRyxDQUFDO1FBRVosNkJBQTZCO1FBQzdCLE1BQU1KLGtGQUF3QkE7UUFDOUJHLFFBQVFDLEdBQUcsQ0FBQztRQUVaSCxnQkFBZ0I7UUFDaEJFLFFBQVFDLEdBQUcsQ0FBQztJQUNkLEVBQUUsT0FBT0MsT0FBTztRQUNkRixRQUFRRSxLQUFLLENBQUMsb0NBQW9DQTtRQUNsRCxNQUFNQTtJQUNSO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLGVBQWVDO0lBQ3BCLElBQUksQ0FBQ0wsZUFBZTtRQUNsQixNQUFNQztJQUNSO0FBQ0Y7QUFFQSwwQ0FBMEM7QUFDMUMsSUFBSUssS0FBcUMsRUFBRSxFQUUxQyIsInNvdXJjZXMiOlsiL1VzZXJzL29uZWJpcmQvZ2l0aHViL2Vib29rLW1jcC9tY3AtY2hhdC11aS9iYWNrZW5kL3NyYy9saWIvc3RhcnR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0aWFsaXplU2Vzc2lvbk1hbmFnZXIgfSBmcm9tICdAL3NlcnZpY2VzL1Nlc3Npb25NYW5hZ2VyJztcblxubGV0IGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGFsbCBiYWNrZW5kIHNlcnZpY2VzXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplQmFja2VuZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgaWYgKGlzSW5pdGlhbGl6ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCdJbml0aWFsaXppbmcgYmFja2VuZCBzZXJ2aWNlcy4uLicpO1xuICAgIFxuICAgIC8vIEluaXRpYWxpemUgc2Vzc2lvbiBtYW5hZ2VyXG4gICAgYXdhaXQgaW5pdGlhbGl6ZVNlc3Npb25NYW5hZ2VyKCk7XG4gICAgY29uc29sZS5sb2coJ+KckyBTZXNzaW9uIG1hbmFnZXIgaW5pdGlhbGl6ZWQnKTtcblxuICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnNvbGUubG9nKCfinJMgQmFja2VuZCBpbml0aWFsaXphdGlvbiBjb21wbGV0ZScpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBCYWNrZW5kIGluaXRpYWxpemF0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYmFja2VuZCBpcyBpbml0aWFsaXplZCBiZWZvcmUgaGFuZGxpbmcgcmVxdWVzdHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVuc3VyZUluaXRpYWxpemVkKCk6IFByb21pc2U8dm9pZD4ge1xuICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICBhd2FpdCBpbml0aWFsaXplQmFja2VuZCgpO1xuICB9XG59XG5cbi8vIEluaXRpYWxpemUgb24gbW9kdWxlIGxvYWQgaW4gcHJvZHVjdGlvblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgaW5pdGlhbGl6ZUJhY2tlbmQoKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbn0iXSwibmFtZXMiOlsiaW5pdGlhbGl6ZVNlc3Npb25NYW5hZ2VyIiwiaXNJbml0aWFsaXplZCIsImluaXRpYWxpemVCYWNrZW5kIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZW5zdXJlSW5pdGlhbGl6ZWQiLCJwcm9jZXNzIiwiY2F0Y2giXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/startup.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/SessionManager.ts":
/*!****************************************!*\
  !*** ./src/services/SessionManager.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager),\n/* harmony export */   getSessionManager: () => (/* binding */ getSessionManager),\n/* harmony export */   initializeSessionManager: () => (/* binding */ initializeSessionManager)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_encryption__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/encryption */ \"(rsc)/./src/lib/encryption.ts\");\n\n\n\n\nclass SessionManager {\n    constructor(storageDir = './data/sessions', maxSessions = 1000, cleanupIntervalMs = 24 * 60 * 60 * 1000 // 24 hours\n    ){\n        this.encryptionService = (0,_lib_encryption__WEBPACK_IMPORTED_MODULE_3__.getEncryptionService)();\n        this.storageDir = storageDir;\n        this.storageFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(storageDir, 'sessions.json');\n        this.maxSessions = maxSessions;\n        this.cleanupIntervalMs = cleanupIntervalMs;\n        this.storage = {\n            sessions: {},\n            metadata: {\n                lastCleanup: new Date().toISOString(),\n                totalSessions: 0,\n                version: '1.0.0',\n                encrypted: false\n            }\n        };\n    }\n    /**\n   * Initialize the session manager and load existing sessions\n   */ async initialize() {\n        try {\n            await this.ensureStorageDirectory();\n            await this.loadSessions();\n            this.startCleanupTimer();\n        } catch (error) {\n            console.error('Failed to initialize SessionManager:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to initialize session storage');\n        }\n    }\n    /**\n   * Create a new chat session\n   */ async createSession(provider, model, mcpServers = [], initialMessage) {\n        const sessionId = this.generateSessionId();\n        const now = new Date();\n        const session = {\n            id: sessionId,\n            title: 'New Chat',\n            messages: initialMessage ? [\n                initialMessage\n            ] : [],\n            createdAt: now,\n            updatedAt: now,\n            provider,\n            model,\n            mcpServers\n        };\n        this.storage.sessions[sessionId] = session;\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        await this.saveSessions();\n        return session;\n    }\n    /**\n   * Get a session by ID\n   */ async getSession(sessionId) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        return {\n            ...session\n        }; // Return a copy to prevent mutations\n    }\n    /**\n   * Update an existing session\n   */ async updateSession(sessionId, updates) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        // Prevent updating immutable fields\n        const { id, createdAt, ...allowedUpdates } = updates;\n        const updatedSession = {\n            ...session,\n            ...allowedUpdates,\n            updatedAt: new Date()\n        };\n        this.storage.sessions[sessionId] = updatedSession;\n        await this.saveSessions();\n        return {\n            ...updatedSession\n        };\n    }\n    /**\n   * Add a message to a session\n   */ async addMessage(sessionId, message) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        session.messages.push(message);\n        session.updatedAt = new Date();\n        this.storage.sessions[sessionId] = session;\n        await this.saveSessions();\n        return {\n            ...session\n        };\n    }\n    /**\n   * Delete a session\n   */ async deleteSession(sessionId) {\n        if (!this.storage.sessions[sessionId]) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        delete this.storage.sessions[sessionId];\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        await this.saveSessions();\n    }\n    /**\n   * Search and filter sessions\n   */ async searchSessions(options = {}) {\n        const { query, provider, limit = 50, offset = 0, sortBy = 'updatedAt', sortOrder = 'desc' } = options;\n        let sessions = Object.values(this.storage.sessions);\n        // Apply filters\n        if (query) {\n            const searchQuery = query.toLowerCase();\n            sessions = sessions.filter((session)=>session.title.toLowerCase().includes(searchQuery) || session.messages.some((msg)=>msg.content.toLowerCase().includes(searchQuery)));\n        }\n        if (provider) {\n            sessions = sessions.filter((session)=>session.provider === provider);\n        }\n        // Sort sessions\n        sessions.sort((a, b)=>{\n            const aValue = a[sortBy];\n            const bValue = b[sortBy];\n            let comparison = 0;\n            if (aValue instanceof Date && bValue instanceof Date) {\n                comparison = aValue.getTime() - bValue.getTime();\n            } else {\n                comparison = String(aValue).localeCompare(String(bValue));\n            }\n            return sortOrder === 'desc' ? -comparison : comparison;\n        });\n        const total = sessions.length;\n        const paginatedSessions = sessions.slice(offset, offset + limit);\n        // Convert to summary format\n        const sessionSummaries = paginatedSessions.map((session)=>({\n                id: session.id,\n                title: session.title,\n                createdAt: session.createdAt.toISOString(),\n                updatedAt: session.updatedAt.toISOString(),\n                messageCount: session.messages.length,\n                provider: session.provider,\n                model: session.model\n            }));\n        return {\n            sessions: sessionSummaries,\n            total,\n            hasMore: offset + limit < total\n        };\n    }\n    /**\n   * Get all sessions (for API compatibility)\n   */ async getAllSessions() {\n        return Object.values(this.storage.sessions);\n    }\n    /**\n   * Generate automatic session title using LLM\n   */ async generateSessionTitle(sessionId, llmService) {\n        const session = this.storage.sessions[sessionId];\n        if (!session) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.NotFoundError(`Session with ID ${sessionId} not found`);\n        }\n        // If no LLM service provided or no messages, use fallback\n        if (!llmService || session.messages.length === 0) {\n            return this.generateFallbackTitle(session);\n        }\n        try {\n            // Get first few messages for context\n            const contextMessages = session.messages.filter((msg)=>msg.role === 'user' || msg.role === 'assistant').slice(0, 4).map((msg)=>`${msg.role}: ${msg.content.substring(0, 200)}`).join('\\n');\n            const titlePrompt = `Based on this conversation, generate a concise, descriptive title (max 50 characters):\n\n${contextMessages}\n\nTitle:`;\n            const response = await llmService.generateCompletion({\n                messages: [\n                    {\n                        role: 'user',\n                        content: titlePrompt\n                    }\n                ],\n                maxTokens: 20,\n                temperature: 0.3\n            });\n            const generatedTitle = response.content?.trim().replace(/^[\"']|[\"']$/g, '') // Remove quotes\n            .substring(0, 50) // Ensure max length\n             || this.generateFallbackTitle(session);\n            // Update session with new title\n            await this.updateSession(sessionId, {\n                title: generatedTitle\n            });\n            return generatedTitle;\n        } catch (error) {\n            console.error('Failed to generate session title:', error);\n            return this.generateFallbackTitle(session);\n        }\n    }\n    /**\n   * Clean up old sessions based on age and count limits\n   */ async cleanupSessions() {\n        const sessions = Object.values(this.storage.sessions);\n        const now = new Date();\n        const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\n        let deletedCount = 0;\n        // Delete sessions older than maxAge\n        const oldSessions = sessions.filter((session)=>now.getTime() - session.updatedAt.getTime() > maxAge);\n        for (const session of oldSessions){\n            delete this.storage.sessions[session.id];\n            deletedCount++;\n        }\n        // If still over limit, delete oldest sessions\n        const remainingSessions = Object.values(this.storage.sessions);\n        if (remainingSessions.length > this.maxSessions) {\n            const sortedSessions = remainingSessions.sort((a, b)=>a.updatedAt.getTime() - b.updatedAt.getTime());\n            const sessionsToDelete = sortedSessions.slice(0, remainingSessions.length - this.maxSessions);\n            for (const session of sessionsToDelete){\n                delete this.storage.sessions[session.id];\n                deletedCount++;\n            }\n        }\n        this.storage.metadata.lastCleanup = now.toISOString();\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        if (deletedCount > 0) {\n            await this.saveSessions();\n        }\n        return {\n            deletedCount\n        };\n    }\n    /**\n   * Get session statistics\n   */ getStatistics() {\n        const sessions = Object.values(this.storage.sessions);\n        const providerBreakdown = {\n            openai: 0,\n            deepseek: 0,\n            openrouter: 0\n        };\n        let totalMessages = 0;\n        sessions.forEach((session)=>{\n            providerBreakdown[session.provider]++;\n            totalMessages += session.messages.length;\n        });\n        return {\n            totalSessions: sessions.length,\n            lastCleanup: this.storage.metadata.lastCleanup,\n            providerBreakdown,\n            averageMessagesPerSession: sessions.length > 0 ? totalMessages / sessions.length : 0\n        };\n    }\n    /**\n   * Export chat history for backup\n   */ async exportChatHistory(options = {}) {\n        const { sessionIds, dateFrom, dateTo, includeSystemMessages = false } = options;\n        let sessions = Object.values(this.storage.sessions);\n        // Filter by session IDs if specified\n        if (sessionIds && sessionIds.length > 0) {\n            sessions = sessions.filter((session)=>sessionIds.includes(session.id));\n        }\n        // Filter by date range\n        if (dateFrom) {\n            sessions = sessions.filter((session)=>session.createdAt >= dateFrom);\n        }\n        if (dateTo) {\n            sessions = sessions.filter((session)=>session.createdAt <= dateTo);\n        }\n        // Filter messages if needed\n        const exportSessions = sessions.map((session)=>({\n                ...session,\n                messages: includeSystemMessages ? session.messages : session.messages.filter((msg)=>msg.role !== 'system')\n            }));\n        // Calculate metadata\n        const dates = exportSessions.map((s)=>s.createdAt).sort();\n        const earliest = dates.length > 0 ? dates[0].toISOString() : new Date().toISOString();\n        const latest = dates.length > 0 ? dates[dates.length - 1].toISOString() : new Date().toISOString();\n        return {\n            version: '1.0.0',\n            exportDate: new Date().toISOString(),\n            sessions: exportSessions,\n            metadata: {\n                totalSessions: exportSessions.length,\n                dateRange: {\n                    earliest,\n                    latest\n                }\n            }\n        };\n    }\n    /**\n   * Import chat history from backup\n   */ async importChatHistory(exportData, options = {}) {\n        const { overwriteExisting = false, generateNewIds = false } = options;\n        let imported = 0;\n        let skipped = 0;\n        const errors = [];\n        try {\n            if (exportData.version !== '1.0.0') {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Unsupported export version');\n            }\n            for (const session of exportData.sessions){\n                try {\n                    let sessionId = session.id;\n                    // Generate new ID if requested or if conflict exists\n                    if (generateNewIds || this.storage.sessions[sessionId] && !overwriteExisting) {\n                        sessionId = this.generateSessionId();\n                    }\n                    // Skip if session exists and not overwriting\n                    if (this.storage.sessions[sessionId] && !overwriteExisting) {\n                        skipped++;\n                        continue;\n                    }\n                    // Import session with new ID if needed\n                    const importedSession = {\n                        ...session,\n                        id: sessionId,\n                        // Ensure dates are Date objects\n                        createdAt: new Date(session.createdAt),\n                        updatedAt: new Date(session.updatedAt),\n                        messages: session.messages.map((msg)=>({\n                                ...msg,\n                                timestamp: new Date(msg.timestamp)\n                            }))\n                    };\n                    this.storage.sessions[sessionId] = importedSession;\n                    imported++;\n                } catch (error) {\n                    errors.push(`Failed to import session ${session.id}: ${error}`);\n                }\n            }\n            this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n            await this.saveSessions();\n            return {\n                imported,\n                skipped,\n                errors\n            };\n        } catch (error) {\n            console.error('Failed to import chat history:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to import chat history');\n        }\n    }\n    /**\n   * Secure cleanup - permanently delete sessions and clear sensitive data\n   */ async secureCleanup(options = {}) {\n        const { olderThanDays = 30, sessionIds, clearAllSensitiveData = false } = options;\n        let deletedSessions = 0;\n        const now = new Date();\n        const maxAge = olderThanDays * 24 * 60 * 60 * 1000;\n        // Delete specific sessions if provided\n        if (sessionIds && sessionIds.length > 0) {\n            for (const sessionId of sessionIds){\n                if (this.storage.sessions[sessionId]) {\n                    delete this.storage.sessions[sessionId];\n                    deletedSessions++;\n                }\n            }\n        } else {\n            // Delete old sessions\n            const sessions = Object.values(this.storage.sessions);\n            const oldSessions = sessions.filter((session)=>now.getTime() - session.updatedAt.getTime() > maxAge);\n            for (const session of oldSessions){\n                delete this.storage.sessions[session.id];\n                deletedSessions++;\n            }\n        }\n        // Clear sensitive data from remaining sessions if requested\n        let clearedData = false;\n        if (clearAllSensitiveData) {\n            Object.values(this.storage.sessions).forEach((session)=>{\n                session.messages = session.messages.map((message)=>({\n                        ...message,\n                        // Remove any potential sensitive content patterns\n                        content: this.sanitizeMessageContent(message.content)\n                    }));\n            });\n            clearedData = true;\n        }\n        this.storage.metadata.totalSessions = Object.keys(this.storage.sessions).length;\n        this.storage.metadata.lastCleanup = now.toISOString();\n        await this.saveSessions();\n        return {\n            deletedSessions,\n            clearedData\n        };\n    }\n    /**\n   * Get privacy and security statistics\n   */ getPrivacyStatistics() {\n        const sessions = Object.values(this.storage.sessions);\n        const now = new Date();\n        if (sessions.length === 0) {\n            return {\n                totalSessions: 0,\n                totalMessages: 0,\n                oldestSession: null,\n                newestSession: null,\n                averageSessionAge: 0,\n                sessionsWithSensitiveData: 0,\n                lastCleanup: this.storage.metadata.lastCleanup\n            };\n        }\n        const sortedByDate = sessions.sort((a, b)=>a.createdAt.getTime() - b.createdAt.getTime());\n        const totalMessages = sessions.reduce((sum, session)=>sum + session.messages.length, 0);\n        const totalAge = sessions.reduce((sum, session)=>sum + (now.getTime() - session.createdAt.getTime()), 0);\n        const averageSessionAge = totalAge / sessions.length / (24 * 60 * 60 * 1000); // in days\n        // Count sessions that might contain sensitive data (API keys, tokens, etc.)\n        const sensitivePatterns = [\n            /api[_-]?key/i,\n            /token/i,\n            /secret/i,\n            /password/i\n        ];\n        const sessionsWithSensitiveData = sessions.filter((session)=>session.messages.some((message)=>sensitivePatterns.some((pattern)=>pattern.test(message.content)))).length;\n        return {\n            totalSessions: sessions.length,\n            totalMessages,\n            oldestSession: sortedByDate[0].createdAt.toISOString(),\n            newestSession: sortedByDate[sortedByDate.length - 1].createdAt.toISOString(),\n            averageSessionAge,\n            sessionsWithSensitiveData,\n            lastCleanup: this.storage.metadata.lastCleanup\n        };\n    }\n    /**\n   * Shutdown the session manager\n   */ async shutdown() {\n        if (this.cleanupTimer) {\n            clearInterval(this.cleanupTimer);\n            this.cleanupTimer = undefined;\n        }\n        await this.saveSessions();\n    }\n    // Private methods\n    generateSessionId() {\n        return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    generateFallbackTitle(session) {\n        const userMessages = session.messages.filter((msg)=>msg.role === 'user');\n        if (userMessages.length > 0) {\n            const originalMessage = userMessages[0].content;\n            const truncatedMessage = originalMessage.substring(0, 40);\n            return originalMessage.length > 40 ? `${truncatedMessage}...` : truncatedMessage;\n        }\n        const date = session.createdAt.toLocaleDateString();\n        return `Chat from ${date}`;\n    }\n    async ensureStorageDirectory() {\n        try {\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.mkdir(this.storageDir, {\n                recursive: true\n            });\n        } catch (error) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError(`Failed to create storage directory: ${error}`);\n        }\n    }\n    async loadSessions() {\n        try {\n            const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.storageFile, 'utf-8');\n            const parsed = JSON.parse(data);\n            // Convert date strings back to Date objects\n            Object.values(parsed.sessions).forEach((session)=>{\n                session.createdAt = new Date(session.createdAt);\n                session.updatedAt = new Date(session.updatedAt);\n                session.messages.forEach((message)=>{\n                    message.timestamp = new Date(message.timestamp);\n                });\n            });\n            this.storage = parsed;\n        } catch (error) {\n            if (error.code === 'ENOENT') {\n                // File doesn't exist, start with empty storage\n                this.storage = {\n                    sessions: {},\n                    metadata: {\n                        lastCleanup: new Date().toISOString(),\n                        totalSessions: 0,\n                        version: '1.0.0',\n                        encrypted: false\n                    }\n                };\n                await this.saveSessions();\n            } else {\n                console.error('Failed to load sessions:', error);\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to load session data');\n            }\n        }\n    }\n    async saveSessions() {\n        try {\n            const data = JSON.stringify(this.storage, null, 2);\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(this.storageFile, data, 'utf-8');\n        } catch (error) {\n            console.error('Failed to save sessions:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.InternalServerError('Failed to save session data');\n        }\n    }\n    startCleanupTimer() {\n        this.cleanupTimer = setInterval(async ()=>{\n            try {\n                await this.cleanupSessions();\n            } catch (error) {\n                console.error('Automatic cleanup failed:', error);\n            }\n        }, this.cleanupIntervalMs);\n    }\n    sanitizeMessageContent(content) {\n        // Remove potential API keys, tokens, and other sensitive data\n        const sensitivePatterns = [\n            /sk-[a-zA-Z0-9]{20,}/g,\n            /sk-or-[a-zA-Z0-9]{30,}/g,\n            /Bearer\\s+[a-zA-Z0-9]{20,}/g,\n            /[a-zA-Z0-9]{32,}/g\n        ];\n        let sanitized = content;\n        sensitivePatterns.forEach((pattern)=>{\n            sanitized = sanitized.replace(pattern, '[REDACTED]');\n        });\n        return sanitized;\n    }\n}\n// Singleton instance\nlet sessionManagerInstance = null;\nfunction getSessionManager() {\n    if (!sessionManagerInstance) {\n        sessionManagerInstance = new SessionManager();\n    }\n    return sessionManagerInstance;\n}\nasync function initializeSessionManager() {\n    const manager = getSessionManager();\n    await manager.initialize();\n    return manager;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/SessionManager.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/crypto-js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fchat-history%2Froute&page=%2Fapi%2Fchat-history%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat-history%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();