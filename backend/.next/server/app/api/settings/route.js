/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/settings/route";
exports.ids = ["app/api/settings/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_settings_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/settings/route.ts */ \"(rsc)/./src/app/api/settings/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/settings/route\",\n        pathname: \"/api/settings\",\n        filename: \"route\",\n        bundlePath: \"app/api/settings/route\"\n    },\n    distDir: \".next\" || 0,\n    projectDir:  false || '',\n    resolvedPagePath: \"/Users/onebird/github/ebook-mcp/mcp-chat-ui/backend/src/app/api/settings/route.ts\",\n    nextConfigOutput,\n    userland: _Users_onebird_github_ebook_mcp_mcp_chat_ui_backend_src_app_api_settings_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/settings/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = \"false\";\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                dynamicIO: Boolean(nextConfig.experimental.dynamicIO),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/settings/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/settings/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_security__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/security */ \"(rsc)/./src/lib/security.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n/* harmony import */ var _lib_validation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/validation */ \"(rsc)/./src/lib/validation.ts\");\n/* harmony import */ var _services_SecureSettingsManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/services/SecureSettingsManager */ \"(rsc)/./src/services/SecureSettingsManager.ts\");\n\n\n\n\n\nasync function getSettingsHandler(request) {\n    const settingsManager = (0,_services_SecureSettingsManager__WEBPACK_IMPORTED_MODULE_4__.getSecureSettingsManager)();\n    await settingsManager.initialize();\n    const settings = await settingsManager.getSettings();\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(settings);\n}\nasync function updateSettingsHandler(request) {\n    let body;\n    try {\n        body = await request.json();\n    } catch (error) {\n        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.ValidationError('Invalid JSON in request body');\n    }\n    const validatedSettings = (0,_lib_validation__WEBPACK_IMPORTED_MODULE_3__.validateSettings)(body);\n    const settingsManager = (0,_services_SecureSettingsManager__WEBPACK_IMPORTED_MODULE_4__.getSecureSettingsManager)();\n    await settingsManager.initialize();\n    const updatedSettings = await settingsManager.updateSettings(validatedSettings);\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(updatedSettings);\n}\nasync function settingsHandler(request) {\n    switch(request.method){\n        case 'GET':\n            return getSettingsHandler(request);\n        case 'POST':\n        case 'PUT':\n            return updateSettingsHandler(request);\n        default:\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Method not allowed',\n                message: 'Only GET, POST, and PUT methods are allowed'\n            }, {\n                status: 405\n            });\n    }\n}\nconst GET = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(getSettingsHandler);\nconst POST = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(updateSettingsHandler);\nconst PUT = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(updateSettingsHandler);\nconst OPTIONS = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.withSecurity)(async ()=>new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n        status: 200\n    }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9zZXR0aW5ncy9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBMkM7QUFDRztBQUNDO0FBQ0s7QUFDd0I7QUFFNUUsZUFBZUssbUJBQW1CQyxPQUFnQjtJQUNoRCxNQUFNQyxrQkFBa0JILHlGQUF3QkE7SUFDaEQsTUFBTUcsZ0JBQWdCQyxVQUFVO0lBRWhDLE1BQU1DLFdBQVcsTUFBTUYsZ0JBQWdCRyxXQUFXO0lBQ2xELE9BQU9WLHFEQUFZQSxDQUFDVyxJQUFJLENBQUNGO0FBQzNCO0FBRUEsZUFBZUcsc0JBQXNCTixPQUFnQjtJQUNuRCxJQUFJTztJQUNKLElBQUk7UUFDRkEsT0FBTyxNQUFNUCxRQUFRSyxJQUFJO0lBQzNCLEVBQUUsT0FBT0csT0FBTztRQUNkLE1BQU0sSUFBSVosd0RBQWVBLENBQUM7SUFDNUI7SUFFQSxNQUFNYSxvQkFBb0JaLGlFQUFnQkEsQ0FBQ1U7SUFFM0MsTUFBTU4sa0JBQWtCSCx5RkFBd0JBO0lBQ2hELE1BQU1HLGdCQUFnQkMsVUFBVTtJQUVoQyxNQUFNUSxrQkFBa0IsTUFBTVQsZ0JBQWdCVSxjQUFjLENBQUNGO0lBQzdELE9BQU9mLHFEQUFZQSxDQUFDVyxJQUFJLENBQUNLO0FBQzNCO0FBRUEsZUFBZUUsZ0JBQWdCWixPQUFnQjtJQUM3QyxPQUFRQSxRQUFRYSxNQUFNO1FBQ3BCLEtBQUs7WUFDSCxPQUFPZCxtQkFBbUJDO1FBQzVCLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT00sc0JBQXNCTjtRQUMvQjtZQUNFLE9BQU9OLHFEQUFZQSxDQUFDVyxJQUFJLENBQ3RCO2dCQUFFRyxPQUFPO2dCQUFzQk0sU0FBUztZQUE4QyxHQUN0RjtnQkFBRUMsUUFBUTtZQUFJO0lBRXBCO0FBQ0Y7QUFFTyxNQUFNQyxNQUFNckIsMkRBQVlBLENBQUNJLG9CQUFvQjtBQUM3QyxNQUFNa0IsT0FBT3RCLDJEQUFZQSxDQUFDVyx1QkFBdUI7QUFDakQsTUFBTVksTUFBTXZCLDJEQUFZQSxDQUFDVyx1QkFBdUI7QUFDaEQsTUFBTWEsVUFBVXhCLDJEQUFZQSxDQUFDLFVBQVksSUFBSUQscURBQVlBLENBQUMsTUFBTTtRQUFFcUIsUUFBUTtJQUFJLElBQUkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbmViaXJkL2dpdGh1Yi9lYm9vay1tY3AvbWNwLWNoYXQtdWkvYmFja2VuZC9zcmMvYXBwL2FwaS9zZXR0aW5ncy9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyB3aXRoU2VjdXJpdHkgfSBmcm9tICdAL2xpYi9zZWN1cml0eSc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICdAL2xpYi9lcnJvcnMnO1xuaW1wb3J0IHsgdmFsaWRhdGVTZXR0aW5ncyB9IGZyb20gJ0AvbGliL3ZhbGlkYXRpb24nO1xuaW1wb3J0IHsgZ2V0U2VjdXJlU2V0dGluZ3NNYW5hZ2VyIH0gZnJvbSAnQC9zZXJ2aWNlcy9TZWN1cmVTZXR0aW5nc01hbmFnZXInO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRTZXR0aW5nc0hhbmRsZXIocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIGNvbnN0IHNldHRpbmdzTWFuYWdlciA9IGdldFNlY3VyZVNldHRpbmdzTWFuYWdlcigpO1xuICBhd2FpdCBzZXR0aW5nc01hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuICBcbiAgY29uc3Qgc2V0dGluZ3MgPSBhd2FpdCBzZXR0aW5nc01hbmFnZXIuZ2V0U2V0dGluZ3MoKTtcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHNldHRpbmdzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlU2V0dGluZ3NIYW5kbGVyKHJlcXVlc3Q6IFJlcXVlc3QpOiBQcm9taXNlPE5leHRSZXNwb25zZT4ge1xuICBsZXQgYm9keTtcbiAgdHJ5IHtcbiAgICBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignSW52YWxpZCBKU09OIGluIHJlcXVlc3QgYm9keScpO1xuICB9XG4gIFxuICBjb25zdCB2YWxpZGF0ZWRTZXR0aW5ncyA9IHZhbGlkYXRlU2V0dGluZ3MoYm9keSk7XG4gIFxuICBjb25zdCBzZXR0aW5nc01hbmFnZXIgPSBnZXRTZWN1cmVTZXR0aW5nc01hbmFnZXIoKTtcbiAgYXdhaXQgc2V0dGluZ3NNYW5hZ2VyLmluaXRpYWxpemUoKTtcbiAgXG4gIGNvbnN0IHVwZGF0ZWRTZXR0aW5ncyA9IGF3YWl0IHNldHRpbmdzTWFuYWdlci51cGRhdGVTZXR0aW5ncyh2YWxpZGF0ZWRTZXR0aW5ncyk7XG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih1cGRhdGVkU2V0dGluZ3MpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXR0aW5nc0hhbmRsZXIocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8TmV4dFJlc3BvbnNlPiB7XG4gIHN3aXRjaCAocmVxdWVzdC5tZXRob2QpIHtcbiAgICBjYXNlICdHRVQnOlxuICAgICAgcmV0dXJuIGdldFNldHRpbmdzSGFuZGxlcihyZXF1ZXN0KTtcbiAgICBjYXNlICdQT1NUJzpcbiAgICBjYXNlICdQVVQnOlxuICAgICAgcmV0dXJuIHVwZGF0ZVNldHRpbmdzSGFuZGxlcihyZXF1ZXN0KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJywgbWVzc2FnZTogJ09ubHkgR0VULCBQT1NULCBhbmQgUFVUIG1ldGhvZHMgYXJlIGFsbG93ZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDUgfVxuICAgICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgR0VUID0gd2l0aFNlY3VyaXR5KGdldFNldHRpbmdzSGFuZGxlcik7XG5leHBvcnQgY29uc3QgUE9TVCA9IHdpdGhTZWN1cml0eSh1cGRhdGVTZXR0aW5nc0hhbmRsZXIpO1xuZXhwb3J0IGNvbnN0IFBVVCA9IHdpdGhTZWN1cml0eSh1cGRhdGVTZXR0aW5nc0hhbmRsZXIpO1xuZXhwb3J0IGNvbnN0IE9QVElPTlMgPSB3aXRoU2VjdXJpdHkoYXN5bmMgKCkgPT4gbmV3IE5leHRSZXNwb25zZShudWxsLCB7IHN0YXR1czogMjAwIH0pKTsiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwid2l0aFNlY3VyaXR5IiwiVmFsaWRhdGlvbkVycm9yIiwidmFsaWRhdGVTZXR0aW5ncyIsImdldFNlY3VyZVNldHRpbmdzTWFuYWdlciIsImdldFNldHRpbmdzSGFuZGxlciIsInJlcXVlc3QiLCJzZXR0aW5nc01hbmFnZXIiLCJpbml0aWFsaXplIiwic2V0dGluZ3MiLCJnZXRTZXR0aW5ncyIsImpzb24iLCJ1cGRhdGVTZXR0aW5nc0hhbmRsZXIiLCJib2R5IiwiZXJyb3IiLCJ2YWxpZGF0ZWRTZXR0aW5ncyIsInVwZGF0ZWRTZXR0aW5ncyIsInVwZGF0ZVNldHRpbmdzIiwic2V0dGluZ3NIYW5kbGVyIiwibWV0aG9kIiwibWVzc2FnZSIsInN0YXR1cyIsIkdFVCIsIlBPU1QiLCJQVVQiLCJPUFRJT05TIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/settings/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/cors.ts":
/*!*************************!*\
  !*** ./src/lib/cors.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   corsHeaders: () => (/* binding */ corsHeaders),\n/* harmony export */   getSecurityHeaders: () => (/* binding */ getSecurityHeaders),\n/* harmony export */   handleCors: () => (/* binding */ handleCors),\n/* harmony export */   withCors: () => (/* binding */ withCors)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Development: Allow localhost with any port\n// Production: Use specific allowed origins\nconst isDevelopment = \"development\" !== 'production';\nconst LOCALHOST_PATTERN = /^http:\\/\\/localhost:\\d+$/;\nconst ALLOWED_PORTS = [\n    3000,\n    4173,\n    5173,\n    5174,\n    5175,\n    5176,\n    5177,\n    5178,\n    5179,\n    8080\n]; // Common dev ports\nconst PRODUCTION_ORIGINS = [\n    'https://your-domain.com'\n];\nfunction corsHeaders(origin) {\n    let allowedOrigin;\n    console.log('🔍 CORS Debug - Received origin:', origin, 'isDevelopment:', isDevelopment);\n    if (isDevelopment) {\n        // In development, always use the provided origin if it's localhost\n        if (origin && (origin.includes('localhost') || origin.includes('127.0.0.1'))) {\n            allowedOrigin = origin;\n            console.log('✅ CORS Debug - Using provided localhost origin:', allowedOrigin);\n        } else if (origin) {\n            // For any other origin in development, still allow it\n            allowedOrigin = origin;\n            console.log('✅ CORS Debug - Using provided origin:', allowedOrigin);\n        } else {\n            // No origin provided, use wildcard for development\n            allowedOrigin = '*';\n            console.log('⚠️ CORS Debug - No origin provided, using wildcard for development');\n        }\n    } else {\n        // In production, use strict origin checking\n        if (origin && PRODUCTION_ORIGINS.includes(origin)) {\n            allowedOrigin = origin;\n        } else {\n            allowedOrigin = PRODUCTION_ORIGINS[0] || 'http://localhost:5173';\n        }\n    }\n    const headers = {\n        // CORS headers\n        'Access-Control-Allow-Origin': allowedOrigin,\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Max-Age': '86400'\n    };\n    // Add security headers if enabled\n    if (process.env.SECURITY_HEADERS_ENABLED !== 'false') {\n        Object.assign(headers, getSecurityHeaders());\n    }\n    return headers;\n}\nfunction getSecurityHeaders() {\n    return {\n        // Prevent XSS attacks\n        'X-XSS-Protection': '1; mode=block',\n        // Prevent MIME type sniffing\n        'X-Content-Type-Options': 'nosniff',\n        // Prevent clickjacking\n        'X-Frame-Options': 'DENY',\n        // Referrer policy\n        'Referrer-Policy': 'strict-origin-when-cross-origin',\n        // Content Security Policy (restrictive for API)\n        'Content-Security-Policy': \"default-src 'none'; frame-ancestors 'none';\",\n        // Permissions policy\n        'Permissions-Policy': 'camera=(), microphone=(), geolocation=(), payment=()',\n        // HSTS (only in production with HTTPS)\n        ... false && 0\n    };\n}\nfunction handleCors(request) {\n    const origin = request.headers.get('origin');\n    return corsHeaders(origin || undefined);\n}\nfunction withCors(handler) {\n    return async (request, context)=>{\n        // Convert Request to NextRequest for CORS handling\n        const nextRequest = request;\n        const corsHeadersObj = handleCors(nextRequest);\n        if (request.method === 'OPTIONS') {\n            return new next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse(null, {\n                status: 200,\n                headers: corsHeadersObj\n            });\n        }\n        try {\n            const response = await handler(request, context);\n            // Add CORS headers to the response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        } catch (error) {\n            console.error('CORS Handler Error:', error);\n            // Return proper JSON error response\n            const statusCode = error instanceof Error && 'statusCode' in error ? error.statusCode : 500;\n            const errorMessage = error instanceof Error ? error.message : 'Internal Server Error';\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: error instanceof Error ? error.name : 'Error',\n                message: errorMessage,\n                statusCode\n            }, {\n                status: statusCode\n            });\n            // Add CORS headers to error response\n            Object.entries(corsHeadersObj).forEach(([key, value])=>{\n                response.headers.set(key, value);\n            });\n            return response;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/cors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/encryption.ts":
/*!*******************************!*\
  !*** ./src/lib/encryption.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EncryptionService: () => (/* binding */ EncryptionService),\n/* harmony export */   getEncryptionService: () => (/* binding */ getEncryptionService)\n/* harmony export */ });\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js */ \"(rsc)/./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n/**\n * Encryption utility for securing sensitive data like API keys\n */ class EncryptionService {\n    constructor(){\n        // Get encryption key from environment or generate a default one\n        this.secretKey = process.env.ENCRYPTION_KEY || this.generateDefaultKey();\n        if (!process.env.ENCRYPTION_KEY) {\n            console.warn('ENCRYPTION_KEY not set in environment. Using generated key. This is not secure for production!');\n        }\n    }\n    /**\n   * Encrypt sensitive data\n   */ encrypt(data) {\n        try {\n            if (!data) return '';\n            const encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.encrypt(data, this.secretKey).toString();\n            return encrypted;\n        } catch (error) {\n            console.error('Encryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to encrypt data');\n        }\n    }\n    /**\n   * Decrypt sensitive data\n   */ decrypt(encryptedData) {\n        try {\n            if (!encryptedData) return '';\n            const bytes = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().AES.decrypt(encryptedData, this.secretKey);\n            const decrypted = bytes.toString((crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc).Utf8);\n            if (!decrypted) {\n                throw new Error('Failed to decrypt data - invalid key or corrupted data');\n            }\n            return decrypted;\n        } catch (error) {\n            console.error('Decryption failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to decrypt data');\n        }\n    }\n    /**\n   * Hash data for secure comparison (one-way)\n   */ hash(data) {\n        try {\n            return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(data).toString();\n        } catch (error) {\n            console.error('Hashing failed:', error);\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.InternalServerError('Failed to hash data');\n        }\n    }\n    /**\n   * Generate a secure random key\n   */ generateSecureKey() {\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().lib.WordArray.random(256 / 8).toString();\n    }\n    /**\n   * Mask sensitive data for display (show only last 4 characters with limited mask length)\n   */ maskApiKey(apiKey) {\n        if (!apiKey || apiKey.length < 8) {\n            return '••••';\n        }\n        const visibleChars = 4;\n        const maxMaskLength = 8; // Limit mask length to prevent UI overflow\n        const actualMaskLength = Math.min(maxMaskLength, Math.max(0, apiKey.length - visibleChars));\n        const maskedPart = '•'.repeat(actualMaskLength);\n        const visiblePart = apiKey.slice(-visibleChars);\n        return maskedPart + visiblePart;\n    }\n    /**\n   * Validate if a string appears to be encrypted\n   */ isEncrypted(data) {\n        try {\n            // Try to decrypt - if it fails, it's likely not encrypted\n            this.decrypt(data);\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    generateDefaultKey() {\n        // Generate a consistent but unique key based on system info\n        // This is NOT secure for production - should use proper environment variable\n        const systemInfo = process.platform + process.arch + (process.env.HOME || process.env.USERPROFILE || 'default');\n        return crypto_js__WEBPACK_IMPORTED_MODULE_0___default().SHA256(systemInfo + 'mcp-chat-ui-default-key').toString();\n    }\n}\n// Singleton instance\nlet encryptionService = null;\nfunction getEncryptionService() {\n    if (!encryptionService) {\n        encryptionService = new EncryptionService();\n    }\n    return encryptionService;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/encryption.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/errors.ts":
/*!***************************!*\
  !*** ./src/lib/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppError: () => (/* binding */ AppError),\n/* harmony export */   InternalServerError: () => (/* binding */ InternalServerError),\n/* harmony export */   NotFoundError: () => (/* binding */ NotFoundError),\n/* harmony export */   ToolExecutionError: () => (/* binding */ ToolExecutionError),\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   createErrorResponse: () => (/* binding */ createErrorResponse),\n/* harmony export */   handleAsyncRoute: () => (/* binding */ handleAsyncRoute)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\nclass AppError extends Error {\n    constructor(message, statusCode = 500, isOperational = true){\n        super(message);\n        this.statusCode = statusCode;\n        this.isOperational = isOperational;\n        Error.captureStackTrace(this, this.constructor);\n    }\n}\nclass ValidationError extends AppError {\n    constructor(message){\n        super(message, 400);\n    }\n}\nclass NotFoundError extends AppError {\n    constructor(message = 'Resource not found'){\n        super(message, 404);\n    }\n}\nclass UnauthorizedError extends AppError {\n    constructor(message = 'Unauthorized'){\n        super(message, 401);\n    }\n}\nclass InternalServerError extends AppError {\n    constructor(message = 'Internal server error'){\n        super(message, 500);\n    }\n}\nclass ToolExecutionError extends AppError {\n    constructor(message, statusCode = 500){\n        super(message, statusCode);\n    }\n}\nfunction createErrorResponse(error) {\n    console.error('API Error:', error);\n    if (error instanceof AppError) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.constructor.name,\n            message: error.message,\n            statusCode: error.statusCode\n        }, {\n            status: error.statusCode\n        });\n    }\n    if (error instanceof Error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'InternalServerError',\n            message: error.message,\n            statusCode: 500\n        }, {\n            status: 500\n        });\n    }\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n        error: 'UnknownError',\n        message: 'An unknown error occurred',\n        statusCode: 500\n    }, {\n        status: 500\n    });\n}\nfunction handleAsyncRoute(handler) {\n    return async (request, context)=>{\n        try {\n            return await handler(request, context);\n        } catch (error) {\n            return createErrorResponse(error);\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBd0Q7QUFHakQsTUFBTUMsaUJBQWlCQztJQUk1QixZQUFZQyxPQUFlLEVBQUVDLGFBQXFCLEdBQUcsRUFBRUMsZ0JBQXlCLElBQUksQ0FBRTtRQUNwRixLQUFLLENBQUNGO1FBQ04sSUFBSSxDQUFDQyxVQUFVLEdBQUdBO1FBQ2xCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQTtRQUVyQkgsTUFBTUksaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXO0lBQ2hEO0FBQ0Y7QUFFTyxNQUFNQyx3QkFBd0JOO0lBQ25DLFlBQVlFLE9BQWUsQ0FBRTtRQUMzQixLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1LLHNCQUFzQlA7SUFDakMsWUFBWUUsVUFBa0Isb0JBQW9CLENBQUU7UUFDbEQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNTSwwQkFBMEJSO0lBQ3JDLFlBQVlFLFVBQWtCLGNBQWMsQ0FBRTtRQUM1QyxLQUFLLENBQUNBLFNBQVM7SUFDakI7QUFDRjtBQUVPLE1BQU1PLDRCQUE0QlQ7SUFDdkMsWUFBWUUsVUFBa0IsdUJBQXVCLENBQUU7UUFDckQsS0FBSyxDQUFDQSxTQUFTO0lBQ2pCO0FBQ0Y7QUFFTyxNQUFNUSwyQkFBMkJWO0lBQ3RDLFlBQVlFLE9BQWUsRUFBRUMsYUFBcUIsR0FBRyxDQUFFO1FBQ3JELEtBQUssQ0FBQ0QsU0FBU0M7SUFDakI7QUFDRjtBQUVPLFNBQVNRLG9CQUFvQkMsS0FBYztJQUNoREMsUUFBUUQsS0FBSyxDQUFDLGNBQWNBO0lBRTVCLElBQUlBLGlCQUFpQlosVUFBVTtRQUM3QixPQUFPRCxxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPQSxNQUFNLFdBQVcsQ0FBQ0csSUFBSTtZQUM3QmIsU0FBU1UsTUFBTVYsT0FBTztZQUN0QkMsWUFBWVMsTUFBTVQsVUFBVTtRQUM5QixHQUNBO1lBQUVhLFFBQVFKLE1BQU1ULFVBQVU7UUFBQztJQUUvQjtJQUVBLElBQUlTLGlCQUFpQlgsT0FBTztRQUMxQixPQUFPRixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtZQUNFRixPQUFPO1lBQ1BWLFNBQVNVLE1BQU1WLE9BQU87WUFDdEJDLFlBQVk7UUFDZCxHQUNBO1lBQUVhLFFBQVE7UUFBSTtJQUVsQjtJQUVBLE9BQU9qQixxREFBWUEsQ0FBQ2UsSUFBSSxDQUN0QjtRQUNFRixPQUFPO1FBQ1BWLFNBQVM7UUFDVEMsWUFBWTtJQUNkLEdBQ0E7UUFBRWEsUUFBUTtJQUFJO0FBRWxCO0FBRU8sU0FBU0MsaUJBQ2RDLE9BQW1FO0lBRW5FLE9BQU8sT0FBT0MsU0FBa0JDO1FBQzlCLElBQUk7WUFDRixPQUFPLE1BQU1GLFFBQVFDLFNBQVNDO1FBQ2hDLEVBQUUsT0FBT1IsT0FBTztZQUNkLE9BQU9ELG9CQUFvQkM7UUFDN0I7SUFDRjtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvb25lYmlyZC9naXRodWIvZWJvb2stbWNwL21jcC1jaGF0LXVpL2JhY2tlbmQvc3JjL2xpYi9lcnJvcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IEFwaUVycm9yIH0gZnJvbSAnQC90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBBcHBFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHN0YXR1c0NvZGU6IG51bWJlcjtcbiAgcHVibGljIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDAsIGlzT3BlcmF0aW9uYWw6IGJvb2xlYW4gPSB0cnVlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmlzT3BlcmF0aW9uYWwgPSBpc09wZXJhdGlvbmFsO1xuXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZhbGlkYXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgNDAwKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90Rm91bmRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1Jlc291cmNlIG5vdCBmb3VuZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmF1dGhvcml6ZWRFcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nID0gJ1VuYXV0aG9yaXplZCcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCA0MDEpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRlcm5hbFNlcnZlckVycm9yIGV4dGVuZHMgQXBwRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcgPSAnSW50ZXJuYWwgc2VydmVyIGVycm9yJykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIDUwMCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRvb2xFeGVjdXRpb25FcnJvciBleHRlbmRzIEFwcEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nLCBzdGF0dXNDb2RlOiBudW1iZXIgPSA1MDApIHtcbiAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXNDb2RlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JSZXNwb25zZShlcnJvcjogdW5rbm93bik6IE5leHRSZXNwb25zZTxBcGlFcnJvcj4ge1xuICBjb25zb2xlLmVycm9yKCdBUEkgRXJyb3I6JywgZXJyb3IpO1xuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEFwcEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZXJyb3IuY29uc3RydWN0b3IubmFtZSxcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzQ29kZSxcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogZXJyb3Iuc3RhdHVzQ29kZSB9XG4gICAgKTtcbiAgfVxuXG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBlcnJvcjogJ0ludGVybmFsU2VydmVyRXJyb3InLFxuICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICB7XG4gICAgICBlcnJvcjogJ1Vua25vd25FcnJvcicsXG4gICAgICBtZXNzYWdlOiAnQW4gdW5rbm93biBlcnJvciBvY2N1cnJlZCcsXG4gICAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgfSxcbiAgICB7IHN0YXR1czogNTAwIH1cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUFzeW5jUm91dGUoXG4gIGhhbmRsZXI6IChyZXF1ZXN0OiBSZXF1ZXN0LCBjb250ZXh0PzogYW55KSA9PiBQcm9taXNlPE5leHRSZXNwb25zZT5cbikge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3Q6IFJlcXVlc3QsIGNvbnRleHQ/OiBhbnkpID0+IHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IGhhbmRsZXIocmVxdWVzdCwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjcmVhdGVFcnJvclJlc3BvbnNlKGVycm9yKTtcbiAgICB9XG4gIH07XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIkFwcEVycm9yIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzQ29kZSIsImlzT3BlcmF0aW9uYWwiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIlZhbGlkYXRpb25FcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJVbmF1dGhvcml6ZWRFcnJvciIsIkludGVybmFsU2VydmVyRXJyb3IiLCJUb29sRXhlY3V0aW9uRXJyb3IiLCJjcmVhdGVFcnJvclJlc3BvbnNlIiwiZXJyb3IiLCJjb25zb2xlIiwianNvbiIsIm5hbWUiLCJzdGF0dXMiLCJoYW5kbGVBc3luY1JvdXRlIiwiaGFuZGxlciIsInJlcXVlc3QiLCJjb250ZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/errors.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/rateLimit.ts":
/*!******************************!*\
  !*** ./src/lib/rateLimit.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateAndSanitizeInput: () => (/* binding */ validateAndSanitizeInput),\n/* harmony export */   validateJsonInput: () => (/* binding */ validateJsonInput),\n/* harmony export */   withRateLimit: () => (/* binding */ withRateLimit)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\nclass RateLimiter {\n    constructor(windowMs = 15 * 60 * 1000, maxRequests = 100){\n        this.requests = new Map();\n        this.windowMs = windowMs;\n        this.maxRequests = maxRequests;\n        // Clean up expired entries every 5 minutes\n        this.cleanupInterval = setInterval(()=>{\n            this.cleanup();\n        }, 5 * 60 * 1000);\n    }\n    /**\n   * Check if request is within rate limit\n   */ checkLimit(identifier) {\n        const now = Date.now();\n        const entry = this.requests.get(identifier);\n        if (!entry || now > entry.resetTime) {\n            // First request or window expired\n            const resetTime = now + this.windowMs;\n            this.requests.set(identifier, {\n                count: 1,\n                resetTime\n            });\n            return {\n                allowed: true,\n                remaining: this.maxRequests - 1,\n                resetTime\n            };\n        }\n        if (entry.count >= this.maxRequests) {\n            // Rate limit exceeded\n            return {\n                allowed: false,\n                remaining: 0,\n                resetTime: entry.resetTime\n            };\n        }\n        // Increment count\n        entry.count++;\n        this.requests.set(identifier, entry);\n        return {\n            allowed: true,\n            remaining: this.maxRequests - entry.count,\n            resetTime: entry.resetTime\n        };\n    }\n    /**\n   * Clean up expired entries\n   */ cleanup() {\n        const now = Date.now();\n        for (const [key, entry] of this.requests.entries()){\n            if (now > entry.resetTime) {\n                this.requests.delete(key);\n            }\n        }\n    }\n    /**\n   * Shutdown the rate limiter\n   */ shutdown() {\n        if (this.cleanupInterval) {\n            clearInterval(this.cleanupInterval);\n            this.cleanupInterval = undefined;\n        }\n    }\n}\n// Global rate limiter instance\nlet rateLimiter = null;\nfunction getRateLimiter() {\n    if (!rateLimiter) {\n        const windowMs = parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'); // 15 minutes\n        const maxRequests = parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100');\n        rateLimiter = new RateLimiter(windowMs, maxRequests);\n    }\n    return rateLimiter;\n}\n/**\n * Get client identifier for rate limiting\n */ function getClientIdentifier(request) {\n    // Try to get real IP from various headers (for reverse proxy setups)\n    const forwarded = request.headers.get('x-forwarded-for');\n    const realIp = request.headers.get('x-real-ip');\n    const cfConnectingIp = request.headers.get('cf-connecting-ip');\n    const ip = forwarded?.split(',')[0] || realIp || cfConnectingIp || request.ip || 'unknown';\n    // In development, use a more permissive identifier\n    if (true) {\n        return `dev-${ip}`;\n    }\n    return ip;\n}\n/**\n * Rate limiting middleware\n */ function withRateLimit(handler, options = {}) {\n    return async (request, context)=>{\n        // Skip rate limiting if disabled\n        if (process.env.RATE_LIMIT_ENABLED === 'false') {\n            return handler(request, context);\n        }\n        const nextRequest = request;\n        const identifier = getClientIdentifier(nextRequest);\n        const limiter = getRateLimiter();\n        const { allowed, remaining, resetTime } = limiter.checkLimit(identifier);\n        if (!allowed) {\n            const resetDate = new Date(resetTime);\n            const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Rate limit exceeded',\n                message: `Too many requests. Try again after ${resetDate.toISOString()}`,\n                statusCode: 429\n            }, {\n                status: 429\n            });\n            // Add rate limit headers\n            response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n            response.headers.set('X-RateLimit-Remaining', remaining.toString());\n            response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n            response.headers.set('Retry-After', Math.ceil((resetTime - Date.now()) / 1000).toString());\n            return response;\n        }\n        try {\n            const response = await handler(request, context);\n            // Add rate limit headers to successful responses\n            response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n            response.headers.set('X-RateLimit-Remaining', remaining.toString());\n            response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n            return response;\n        } catch (error) {\n            console.error('Rate Limited Handler Error:', error);\n            // Ensure we return a proper JSON error response\n            if (error instanceof Error && 'statusCode' in error) {\n                const statusCode = error.statusCode || 500;\n                const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: error.name || 'Error',\n                    message: error.message,\n                    statusCode\n                }, {\n                    status: statusCode\n                });\n                // Add rate limit headers to error responses too\n                response.headers.set('X-RateLimit-Limit', limiter['maxRequests'].toString());\n                response.headers.set('X-RateLimit-Remaining', remaining.toString());\n                response.headers.set('X-RateLimit-Reset', Math.ceil(resetTime / 1000).toString());\n                return response;\n            }\n            throw error;\n        }\n    };\n}\n/**\n * Enhanced input validation with rate limiting considerations\n */ function validateAndSanitizeInput(input, maxLength = 10000) {\n    if (typeof input !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError('Input must be a string');\n    }\n    if (input.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(`Input too long. Maximum length is ${maxLength} characters`);\n    }\n    // Basic XSS prevention\n    const sanitized = input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/javascript:/gi, '').replace(/on\\w+\\s*=/gi, '').replace(/data:text\\/html/gi, '').trim();\n    return sanitized;\n}\n/**\n * Validate JSON input with size limits\n */ function validateJsonInput(input, maxSize = 1024 * 1024) {\n    if (input.length > maxSize) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError(`JSON input too large. Maximum size is ${maxSize} bytes`);\n    }\n    try {\n        return JSON.parse(input);\n    } catch (error) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.ValidationError('Invalid JSON format');\n    }\n}\n// Cleanup on process exit\nprocess.on('SIGTERM', ()=>{\n    if (rateLimiter) {\n        rateLimiter.shutdown();\n    }\n});\nprocess.on('SIGINT', ()=>{\n    if (rateLimiter) {\n        rateLimiter.shutdown();\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVLEVBQUVDLFlBQW9CLEtBQUs7SUFDNUUsSUFBSSxPQUFPRCxVQUFVLFVBQVU7UUFDN0IsTUFBTSxJQUFJL0Qsb0RBQWVBLENBQUM7SUFDNUI7SUFFQSxJQUFJK0QsTUFBTUUsTUFBTSxHQUFHRCxXQUFXO1FBQzVCLE1BQU0sSUFBSWhFLG9EQUFlQSxDQUFDLENBQUMsa0NBQWtDLEVBQUVnRSxVQUFVLFdBQVcsQ0FBQztJQUN2RjtJQUVBLHVCQUF1QjtJQUN2QixNQUFNRSxZQUFZSCxNQUNmSSxPQUFPLENBQUMsdURBQXVELElBQy9EQSxPQUFPLENBQUMsaUJBQWlCLElBQ3pCQSxPQUFPLENBQUMsZUFBZSxJQUN2QkEsT0FBTyxDQUFDLHFCQUFxQixJQUM3QkMsSUFBSTtJQUVQLE9BQU9GO0FBQ1Q7QUFFQTs7Q0FFQyxHQUNNLFNBQVNHLGtCQUFrQk4sS0FBYSxFQUFFTyxVQUFrQixPQUFPLElBQUk7SUFDNUUsSUFBSVAsTUFBTUUsTUFBTSxHQUFHSyxTQUFTO1FBQzFCLE1BQU0sSUFBSXRFLG9EQUFlQSxDQUFDLENBQUMsc0NBQXNDLEVBQUVzRSxRQUFRLE1BQU0sQ0FBQztJQUNwRjtJQUVBLElBQUk7UUFDRixPQUFPQyxLQUFLQyxLQUFLLENBQUNUO0lBQ3BCLEVBQUUsT0FBT1osT0FBTztRQUNkLE1BQU0sSUFBSW5ELG9EQUFlQSxDQUFDO0lBQzVCO0FBQ0Y7QUFFQSwwQkFBMEI7QUFDMUI2QixRQUFRNEMsRUFBRSxDQUFDLFdBQVc7SUFDcEIsSUFBSS9DLGFBQWE7UUFDZkEsWUFBWUgsUUFBUTtJQUN0QjtBQUNGO0FBRUFNLFFBQVE0QyxFQUFFLENBQUMsVUFBVTtJQUNuQixJQUFJL0MsYUFBYTtRQUNmQSxZQUFZSCxRQUFRO0lBQ3RCO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9vbmViaXJkL2dpdGh1Yi9lYm9vay1tY3AvbWNwLWNoYXQtdWkvYmFja2VuZC9zcmMvbGliL3JhdGVMaW1pdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5pbnRlcmZhY2UgUmF0ZUxpbWl0RW50cnkge1xuICBjb3VudDogbnVtYmVyO1xuICByZXNldFRpbWU6IG51bWJlcjtcbn1cblxuY2xhc3MgUmF0ZUxpbWl0ZXIge1xuICBwcml2YXRlIHJlcXVlc3RzID0gbmV3IE1hcDxzdHJpbmcsIFJhdGVMaW1pdEVudHJ5PigpO1xuICBwcml2YXRlIHJlYWRvbmx5IHdpbmRvd01zOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgbWF4UmVxdWVzdHM6IG51bWJlcjtcbiAgcHJpdmF0ZSBjbGVhbnVwSW50ZXJ2YWw/OiBOb2RlSlMuVGltZW91dDtcblxuICBjb25zdHJ1Y3Rvcih3aW5kb3dNczogbnVtYmVyID0gMTUgKiA2MCAqIDEwMDAsIG1heFJlcXVlc3RzOiBudW1iZXIgPSAxMDApIHtcbiAgICB0aGlzLndpbmRvd01zID0gd2luZG93TXM7XG4gICAgdGhpcy5tYXhSZXF1ZXN0cyA9IG1heFJlcXVlc3RzO1xuICAgIFxuICAgIC8vIENsZWFuIHVwIGV4cGlyZWQgZW50cmllcyBldmVyeSA1IG1pbnV0ZXNcbiAgICB0aGlzLmNsZWFudXBJbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH0sIDUgKiA2MCAqIDEwMDApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHJlcXVlc3QgaXMgd2l0aGluIHJhdGUgbGltaXRcbiAgICovXG4gIGNoZWNrTGltaXQoaWRlbnRpZmllcjogc3RyaW5nKTogeyBhbGxvd2VkOiBib29sZWFuOyByZW1haW5pbmc6IG51bWJlcjsgcmVzZXRUaW1lOiBudW1iZXIgfSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBlbnRyeSA9IHRoaXMucmVxdWVzdHMuZ2V0KGlkZW50aWZpZXIpO1xuXG4gICAgaWYgKCFlbnRyeSB8fCBub3cgPiBlbnRyeS5yZXNldFRpbWUpIHtcbiAgICAgIC8vIEZpcnN0IHJlcXVlc3Qgb3Igd2luZG93IGV4cGlyZWRcbiAgICAgIGNvbnN0IHJlc2V0VGltZSA9IG5vdyArIHRoaXMud2luZG93TXM7XG4gICAgICB0aGlzLnJlcXVlc3RzLnNldChpZGVudGlmaWVyLCB7IGNvdW50OiAxLCByZXNldFRpbWUgfSk7XG4gICAgICByZXR1cm4geyBhbGxvd2VkOiB0cnVlLCByZW1haW5pbmc6IHRoaXMubWF4UmVxdWVzdHMgLSAxLCByZXNldFRpbWUgfTtcbiAgICB9XG5cbiAgICBpZiAoZW50cnkuY291bnQgPj0gdGhpcy5tYXhSZXF1ZXN0cykge1xuICAgICAgLy8gUmF0ZSBsaW1pdCBleGNlZWRlZFxuICAgICAgcmV0dXJuIHsgYWxsb3dlZDogZmFsc2UsIHJlbWFpbmluZzogMCwgcmVzZXRUaW1lOiBlbnRyeS5yZXNldFRpbWUgfTtcbiAgICB9XG5cbiAgICAvLyBJbmNyZW1lbnQgY291bnRcbiAgICBlbnRyeS5jb3VudCsrO1xuICAgIHRoaXMucmVxdWVzdHMuc2V0KGlkZW50aWZpZXIsIGVudHJ5KTtcbiAgICByZXR1cm4geyBhbGxvd2VkOiB0cnVlLCByZW1haW5pbmc6IHRoaXMubWF4UmVxdWVzdHMgLSBlbnRyeS5jb3VudCwgcmVzZXRUaW1lOiBlbnRyeS5yZXNldFRpbWUgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBleHBpcmVkIGVudHJpZXNcbiAgICovXG4gIHByaXZhdGUgY2xlYW51cCgpOiB2b2lkIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGZvciAoY29uc3QgW2tleSwgZW50cnldIG9mIHRoaXMucmVxdWVzdHMuZW50cmllcygpKSB7XG4gICAgICBpZiAobm93ID4gZW50cnkucmVzZXRUaW1lKSB7XG4gICAgICAgIHRoaXMucmVxdWVzdHMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNodXRkb3duIHRoZSByYXRlIGxpbWl0ZXJcbiAgICovXG4gIHNodXRkb3duKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNsZWFudXBJbnRlcnZhbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNsZWFudXBJbnRlcnZhbCk7XG4gICAgICB0aGlzLmNsZWFudXBJbnRlcnZhbCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbn1cblxuLy8gR2xvYmFsIHJhdGUgbGltaXRlciBpbnN0YW5jZVxubGV0IHJhdGVMaW1pdGVyOiBSYXRlTGltaXRlciB8IG51bGwgPSBudWxsO1xuXG5mdW5jdGlvbiBnZXRSYXRlTGltaXRlcigpOiBSYXRlTGltaXRlciB7XG4gIGlmICghcmF0ZUxpbWl0ZXIpIHtcbiAgICBjb25zdCB3aW5kb3dNcyA9IHBhcnNlSW50KHByb2Nlc3MuZW52LlJBVEVfTElNSVRfV0lORE9XX01TIHx8ICc5MDAwMDAnKTsgLy8gMTUgbWludXRlc1xuICAgIGNvbnN0IG1heFJlcXVlc3RzID0gcGFyc2VJbnQocHJvY2Vzcy5lbnYuUkFURV9MSU1JVF9NQVhfUkVRVUVTVFMgfHwgJzEwMCcpO1xuICAgIHJhdGVMaW1pdGVyID0gbmV3IFJhdGVMaW1pdGVyKHdpbmRvd01zLCBtYXhSZXF1ZXN0cyk7XG4gIH1cbiAgcmV0dXJuIHJhdGVMaW1pdGVyO1xufVxuXG4vKipcbiAqIEdldCBjbGllbnQgaWRlbnRpZmllciBmb3IgcmF0ZSBsaW1pdGluZ1xuICovXG5mdW5jdGlvbiBnZXRDbGllbnRJZGVudGlmaWVyKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KTogc3RyaW5nIHtcbiAgLy8gVHJ5IHRvIGdldCByZWFsIElQIGZyb20gdmFyaW91cyBoZWFkZXJzIChmb3IgcmV2ZXJzZSBwcm94eSBzZXR1cHMpXG4gIGNvbnN0IGZvcndhcmRlZCA9IHJlcXVlc3QuaGVhZGVycy5nZXQoJ3gtZm9yd2FyZGVkLWZvcicpO1xuICBjb25zdCByZWFsSXAgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCd4LXJlYWwtaXAnKTtcbiAgY29uc3QgY2ZDb25uZWN0aW5nSXAgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdjZi1jb25uZWN0aW5nLWlwJyk7XG4gIFxuICBjb25zdCBpcCA9IGZvcndhcmRlZD8uc3BsaXQoJywnKVswXSB8fCByZWFsSXAgfHwgY2ZDb25uZWN0aW5nSXAgfHwgXG4gICAgICAgICAgICAgcmVxdWVzdC5pcCB8fCAndW5rbm93bic7XG4gIFxuICAvLyBJbiBkZXZlbG9wbWVudCwgdXNlIGEgbW9yZSBwZXJtaXNzaXZlIGlkZW50aWZpZXJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgcmV0dXJuIGBkZXYtJHtpcH1gO1xuICB9XG4gIFxuICByZXR1cm4gaXA7XG59XG5cbi8qKlxuICogUmF0ZSBsaW1pdGluZyBtaWRkbGV3YXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoUmF0ZUxpbWl0KFxuICBoYW5kbGVyOiAocmVxdWVzdDogUmVxdWVzdCwgY29udGV4dD86IGFueSkgPT4gUHJvbWlzZTxOZXh0UmVzcG9uc2U+LFxuICBvcHRpb25zOiB7IHdpbmRvd01zPzogbnVtYmVyOyBtYXhSZXF1ZXN0cz86IG51bWJlciB9ID0ge31cbikge1xuICByZXR1cm4gYXN5bmMgKHJlcXVlc3Q6IFJlcXVlc3QsIGNvbnRleHQ/OiBhbnkpID0+IHtcbiAgICAvLyBTa2lwIHJhdGUgbGltaXRpbmcgaWYgZGlzYWJsZWRcbiAgICBpZiAocHJvY2Vzcy5lbnYuUkFURV9MSU1JVF9FTkFCTEVEID09PSAnZmFsc2UnKSB7XG4gICAgICByZXR1cm4gaGFuZGxlcihyZXF1ZXN0LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0UmVxdWVzdCA9IHJlcXVlc3QgYXMgTmV4dFJlcXVlc3Q7XG4gICAgY29uc3QgaWRlbnRpZmllciA9IGdldENsaWVudElkZW50aWZpZXIobmV4dFJlcXVlc3QpO1xuICAgIGNvbnN0IGxpbWl0ZXIgPSBnZXRSYXRlTGltaXRlcigpO1xuICAgIFxuICAgIGNvbnN0IHsgYWxsb3dlZCwgcmVtYWluaW5nLCByZXNldFRpbWUgfSA9IGxpbWl0ZXIuY2hlY2tMaW1pdChpZGVudGlmaWVyKTtcbiAgICBcbiAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgIGNvbnN0IHJlc2V0RGF0ZSA9IG5ldyBEYXRlKHJlc2V0VGltZSk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7XG4gICAgICAgICAgZXJyb3I6ICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICAgICAgICBtZXNzYWdlOiBgVG9vIG1hbnkgcmVxdWVzdHMuIFRyeSBhZ2FpbiBhZnRlciAke3Jlc2V0RGF0ZS50b0lTT1N0cmluZygpfWAsXG4gICAgICAgICAgc3RhdHVzQ29kZTogNDI5LFxuICAgICAgICB9LFxuICAgICAgICB7IHN0YXR1czogNDI5IH1cbiAgICAgICk7XG4gICAgICBcbiAgICAgIC8vIEFkZCByYXRlIGxpbWl0IGhlYWRlcnNcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1MaW1pdCcsIGxpbWl0ZXJbJ21heFJlcXVlc3RzJ10udG9TdHJpbmcoKSk7XG4gICAgICByZXNwb25zZS5oZWFkZXJzLnNldCgnWC1SYXRlTGltaXQtUmVtYWluaW5nJywgcmVtYWluaW5nLnRvU3RyaW5nKCkpO1xuICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtUmF0ZUxpbWl0LVJlc2V0JywgTWF0aC5jZWlsKHJlc2V0VGltZSAvIDEwMDApLnRvU3RyaW5nKCkpO1xuICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1JldHJ5LUFmdGVyJywgTWF0aC5jZWlsKChyZXNldFRpbWUgLSBEYXRlLm5vdygpKSAvIDEwMDApLnRvU3RyaW5nKCkpO1xuICAgICAgXG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgaGFuZGxlcihyZXF1ZXN0LCBjb250ZXh0KTtcbiAgICAgIFxuICAgICAgLy8gQWRkIHJhdGUgbGltaXQgaGVhZGVycyB0byBzdWNjZXNzZnVsIHJlc3BvbnNlc1xuICAgICAgcmVzcG9uc2UuaGVhZGVycy5zZXQoJ1gtUmF0ZUxpbWl0LUxpbWl0JywgbGltaXRlclsnbWF4UmVxdWVzdHMnXS50b1N0cmluZygpKTtcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1SZW1haW5pbmcnLCByZW1haW5pbmcudG9TdHJpbmcoKSk7XG4gICAgICByZXNwb25zZS5oZWFkZXJzLnNldCgnWC1SYXRlTGltaXQtUmVzZXQnLCBNYXRoLmNlaWwocmVzZXRUaW1lIC8gMTAwMCkudG9TdHJpbmcoKSk7XG4gICAgICBcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignUmF0ZSBMaW1pdGVkIEhhbmRsZXIgRXJyb3I6JywgZXJyb3IpO1xuICAgICAgXG4gICAgICAvLyBFbnN1cmUgd2UgcmV0dXJuIGEgcHJvcGVyIEpTT04gZXJyb3IgcmVzcG9uc2VcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICdzdGF0dXNDb2RlJyBpbiBlcnJvcikge1xuICAgICAgICBjb25zdCBzdGF0dXNDb2RlID0gKGVycm9yIGFzIGFueSkuc3RhdHVzQ29kZSB8fCA1MDA7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgICAge1xuICAgICAgICAgICAgZXJyb3I6IGVycm9yLm5hbWUgfHwgJ0Vycm9yJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBzdGF0dXM6IHN0YXR1c0NvZGUgfVxuICAgICAgICApO1xuICAgICAgICBcbiAgICAgICAgLy8gQWRkIHJhdGUgbGltaXQgaGVhZGVycyB0byBlcnJvciByZXNwb25zZXMgdG9vXG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1MaW1pdCcsIGxpbWl0ZXJbJ21heFJlcXVlc3RzJ10udG9TdHJpbmcoKSk7XG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1SZW1haW5pbmcnLCByZW1haW5pbmcudG9TdHJpbmcoKSk7XG4gICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuc2V0KCdYLVJhdGVMaW1pdC1SZXNldCcsIE1hdGguY2VpbChyZXNldFRpbWUgLyAxMDAwKS50b1N0cmluZygpKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEVuaGFuY2VkIGlucHV0IHZhbGlkYXRpb24gd2l0aCByYXRlIGxpbWl0aW5nIGNvbnNpZGVyYXRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFuZFNhbml0aXplSW5wdXQoaW5wdXQ6IGFueSwgbWF4TGVuZ3RoOiBudW1iZXIgPSAxMDAwMCk6IHN0cmluZyB7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcignSW5wdXQgbXVzdCBiZSBhIHN0cmluZycpO1xuICB9XG4gIFxuICBpZiAoaW5wdXQubGVuZ3RoID4gbWF4TGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgSW5wdXQgdG9vIGxvbmcuIE1heGltdW0gbGVuZ3RoIGlzICR7bWF4TGVuZ3RofSBjaGFyYWN0ZXJzYCk7XG4gIH1cbiAgXG4gIC8vIEJhc2ljIFhTUyBwcmV2ZW50aW9uXG4gIGNvbnN0IHNhbml0aXplZCA9IGlucHV0XG4gICAgLnJlcGxhY2UoLzxzY3JpcHRcXGJbXjxdKig/Oig/ITxcXC9zY3JpcHQ+KTxbXjxdKikqPFxcL3NjcmlwdD4vZ2ksICcnKVxuICAgIC5yZXBsYWNlKC9qYXZhc2NyaXB0Oi9naSwgJycpXG4gICAgLnJlcGxhY2UoL29uXFx3K1xccyo9L2dpLCAnJylcbiAgICAucmVwbGFjZSgvZGF0YTp0ZXh0XFwvaHRtbC9naSwgJycpXG4gICAgLnRyaW0oKTtcbiAgXG4gIHJldHVybiBzYW5pdGl6ZWQ7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgSlNPTiBpbnB1dCB3aXRoIHNpemUgbGltaXRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUpzb25JbnB1dChpbnB1dDogc3RyaW5nLCBtYXhTaXplOiBudW1iZXIgPSAxMDI0ICogMTAyNCk6IGFueSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPiBtYXhTaXplKSB7XG4gICAgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihgSlNPTiBpbnB1dCB0b28gbGFyZ2UuIE1heGltdW0gc2l6ZSBpcyAke21heFNpemV9IGJ5dGVzYCk7XG4gIH1cbiAgXG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoaW5wdXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0ludmFsaWQgSlNPTiBmb3JtYXQnKTtcbiAgfVxufVxuXG4vLyBDbGVhbnVwIG9uIHByb2Nlc3MgZXhpdFxucHJvY2Vzcy5vbignU0lHVEVSTScsICgpID0+IHtcbiAgaWYgKHJhdGVMaW1pdGVyKSB7XG4gICAgcmF0ZUxpbWl0ZXIuc2h1dGRvd24oKTtcbiAgfVxufSk7XG5cbnByb2Nlc3Mub24oJ1NJR0lOVCcsICgpID0+IHtcbiAgaWYgKHJhdGVMaW1pdGVyKSB7XG4gICAgcmF0ZUxpbWl0ZXIuc2h1dGRvd24oKTtcbiAgfVxufSk7Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsIlZhbGlkYXRpb25FcnJvciIsIlJhdGVMaW1pdGVyIiwid2luZG93TXMiLCJtYXhSZXF1ZXN0cyIsInJlcXVlc3RzIiwiTWFwIiwiY2xlYW51cEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJjbGVhbnVwIiwiY2hlY2tMaW1pdCIsImlkZW50aWZpZXIiLCJub3ciLCJEYXRlIiwiZW50cnkiLCJnZXQiLCJyZXNldFRpbWUiLCJzZXQiLCJjb3VudCIsImFsbG93ZWQiLCJyZW1haW5pbmciLCJrZXkiLCJlbnRyaWVzIiwiZGVsZXRlIiwic2h1dGRvd24iLCJjbGVhckludGVydmFsIiwidW5kZWZpbmVkIiwicmF0ZUxpbWl0ZXIiLCJnZXRSYXRlTGltaXRlciIsInBhcnNlSW50IiwicHJvY2VzcyIsImVudiIsIlJBVEVfTElNSVRfV0lORE9XX01TIiwiUkFURV9MSU1JVF9NQVhfUkVRVUVTVFMiLCJnZXRDbGllbnRJZGVudGlmaWVyIiwicmVxdWVzdCIsImZvcndhcmRlZCIsImhlYWRlcnMiLCJyZWFsSXAiLCJjZkNvbm5lY3RpbmdJcCIsImlwIiwic3BsaXQiLCJ3aXRoUmF0ZUxpbWl0IiwiaGFuZGxlciIsIm9wdGlvbnMiLCJjb250ZXh0IiwiUkFURV9MSU1JVF9FTkFCTEVEIiwibmV4dFJlcXVlc3QiLCJsaW1pdGVyIiwicmVzZXREYXRlIiwicmVzcG9uc2UiLCJqc29uIiwiZXJyb3IiLCJtZXNzYWdlIiwidG9JU09TdHJpbmciLCJzdGF0dXNDb2RlIiwic3RhdHVzIiwidG9TdHJpbmciLCJNYXRoIiwiY2VpbCIsImNvbnNvbGUiLCJFcnJvciIsIm5hbWUiLCJ2YWxpZGF0ZUFuZFNhbml0aXplSW5wdXQiLCJpbnB1dCIsIm1heExlbmd0aCIsImxlbmd0aCIsInNhbml0aXplZCIsInJlcGxhY2UiLCJ0cmltIiwidmFsaWRhdGVKc29uSW5wdXQiLCJtYXhTaXplIiwiSlNPTiIsInBhcnNlIiwib24iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/rateLimit.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/security.ts":
/*!*****************************!*\
  !*** ./src/lib/security.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addSecurityHeaders: () => (/* binding */ addSecurityHeaders),\n/* harmony export */   generateSecureToken: () => (/* binding */ generateSecureToken),\n/* harmony export */   logSecurityEvent: () => (/* binding */ logSecurityEvent),\n/* harmony export */   sanitizeRequestBody: () => (/* binding */ sanitizeRequestBody),\n/* harmony export */   validateFileUpload: () => (/* binding */ validateFileUpload),\n/* harmony export */   withSecurity: () => (/* binding */ withSecurity)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _cors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cors */ \"(rsc)/./src/lib/cors.ts\");\n/* harmony import */ var _rateLimit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rateLimit */ \"(rsc)/./src/lib/rateLimit.ts\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n\n\n/**\n * Comprehensive security middleware that combines all security features\n */ function withSecurity(handler, options = {}) {\n    const { rateLimit = true, cors = true, validation = true, maxBodySize = 1024 * 1024 } = options;\n    let secureHandler = handler;\n    // Apply validation middleware\n    if (validation) {\n        secureHandler = withValidation(secureHandler, {\n            maxBodySize\n        });\n    }\n    // Apply rate limiting\n    if (rateLimit) {\n        secureHandler = (0,_rateLimit__WEBPACK_IMPORTED_MODULE_2__.withRateLimit)(secureHandler);\n    }\n    // Apply CORS\n    if (cors) {\n        secureHandler = (0,_cors__WEBPACK_IMPORTED_MODULE_1__.withCors)(secureHandler);\n    }\n    // Apply error handling\n    secureHandler = (0,_errors__WEBPACK_IMPORTED_MODULE_3__.handleAsyncRoute)(secureHandler);\n    return secureHandler;\n}\n/**\n * Input validation middleware\n */ function withValidation(handler, options) {\n    return async (request, context)=>{\n        const nextRequest = request;\n        // Check content length\n        const contentLength = nextRequest.headers.get('content-length');\n        if (contentLength && parseInt(contentLength) > options.maxBodySize) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Payload too large',\n                message: `Request body exceeds maximum size of ${options.maxBodySize} bytes`,\n                statusCode: 413\n            }, {\n                status: 413\n            });\n        }\n        // Validate content type for POST/PUT requests\n        if ([\n            'POST',\n            'PUT',\n            'PATCH'\n        ].includes(request.method)) {\n            const contentType = nextRequest.headers.get('content-type');\n            if (contentType && !contentType.includes('application/json')) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'Invalid content type',\n                    message: 'Content-Type must be application/json',\n                    statusCode: 415\n                }, {\n                    status: 415\n                });\n            }\n        }\n        // Check for suspicious headers\n        const suspiciousHeaders = [\n            'x-forwarded-host',\n            'x-original-url',\n            'x-rewrite-url'\n        ];\n        for (const header of suspiciousHeaders){\n            if (nextRequest.headers.get(header)) {\n                console.warn(`🚨 Suspicious header detected: ${header}`, {\n                    url: request.url,\n                    ip: nextRequest.headers.get('x-forwarded-for') || 'unknown',\n                    userAgent: nextRequest.headers.get('user-agent') || 'unknown'\n                });\n            }\n        }\n        // Validate URL path\n        const url = new URL(request.url);\n        if (containsSuspiciousPatterns(url.pathname)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid request',\n                message: 'Request contains suspicious patterns',\n                statusCode: 400\n            }, {\n                status: 400\n            });\n        }\n        return handler(request, context);\n    };\n}\n/**\n * Check for suspicious patterns in URL paths\n */ function containsSuspiciousPatterns(path) {\n    const suspiciousPatterns = [\n        /\\.\\./,\n        /\\/\\//,\n        /%2e%2e/i,\n        /%00/i,\n        /\\x00/,\n        /<script/i,\n        /javascript:/i,\n        /vbscript:/i,\n        /data:text\\/html/i,\n        /on\\w+=/i\n    ];\n    return suspiciousPatterns.some((pattern)=>pattern.test(path));\n}\n/**\n * Security headers for API responses\n */ function addSecurityHeaders(response) {\n    // Remove server information\n    response.headers.delete('server');\n    response.headers.delete('x-powered-by');\n    // Add security headers\n    response.headers.set('X-Content-Type-Options', 'nosniff');\n    response.headers.set('X-Frame-Options', 'DENY');\n    response.headers.set('X-XSS-Protection', '1; mode=block');\n    response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin');\n    response.headers.set('Permissions-Policy', 'camera=(), microphone=(), geolocation=()');\n    // Content Security Policy for API\n    response.headers.set('Content-Security-Policy', \"default-src 'none'; frame-ancestors 'none';\");\n    // HSTS in production\n    if (false) {}\n    return response;\n}\n/**\n * Sanitize request body to prevent injection attacks\n */ function sanitizeRequestBody(body) {\n    if (typeof body === 'string') {\n        return sanitizeString(body);\n    }\n    if (Array.isArray(body)) {\n        return body.map((item)=>sanitizeRequestBody(item));\n    }\n    if (body && typeof body === 'object') {\n        const sanitized = {};\n        for (const [key, value] of Object.entries(body)){\n            // Sanitize keys\n            const sanitizedKey = sanitizeString(key);\n            sanitized[sanitizedKey] = sanitizeRequestBody(value);\n        }\n        return sanitized;\n    }\n    return body;\n}\n/**\n * Sanitize string values\n */ function sanitizeString(str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    // Remove dangerous patterns\n    return str.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '').replace(/javascript:/gi, '').replace(/vbscript:/gi, '').replace(/data:text\\/html/gi, '').replace(/on\\w+\\s*=/gi, '').trim();\n}\n/**\n * Log security events\n */ function logSecurityEvent(event, details) {\n    const logEntry = {\n        timestamp: new Date().toISOString(),\n        event,\n        severity: details.severity || 'medium',\n        ip: details.ip || 'unknown',\n        userAgent: details.userAgent || 'unknown',\n        ...details\n    };\n    // In production, this would go to a proper logging service\n    if (details.severity === 'high') {\n        console.error('🚨 HIGH SEVERITY SECURITY EVENT:', logEntry);\n    } else if (details.severity === 'medium') {\n        console.warn('⚠️ SECURITY EVENT:', logEntry);\n    } else {\n        console.info('ℹ️ Security event:', logEntry);\n    }\n}\n/**\n * Validate file upload (if needed in the future)\n */ function validateFileUpload(file, options = {}) {\n    const { maxSize = 10 * 1024 * 1024, allowedTypes = [\n        'application/json',\n        'text/plain'\n    ], allowedExtensions = [\n        '.json',\n        '.txt'\n    ] } = options;\n    if (file.size > maxSize) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File size exceeds maximum of ${maxSize} bytes`);\n    }\n    if (!allowedTypes.includes(file.type)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File type ${file.type} is not allowed`);\n    }\n    const extension = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));\n    if (!allowedExtensions.includes(extension)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`File extension ${extension} is not allowed`);\n    }\n}\n/**\n * Generate secure random tokens\n */ function generateSecureToken(length = 32) {\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    // Use crypto.getRandomValues if available (browser/Node.js)\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n        const array = new Uint8Array(length);\n        crypto.getRandomValues(array);\n        for(let i = 0; i < length; i++){\n            result += chars[array[i] % chars.length];\n        }\n    } else {\n        // Fallback to Math.random (less secure)\n        for(let i = 0; i < length; i++){\n            result += chars[Math.floor(Math.random() * chars.length)];\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/security.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/validation.ts":
/*!*******************************!*\
  !*** ./src/lib/validation.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sanitizeInput: () => (/* binding */ sanitizeInput),\n/* harmony export */   validateApiKey: () => (/* binding */ validateApiKey),\n/* harmony export */   validateChatRequest: () => (/* binding */ validateChatRequest),\n/* harmony export */   validateEmail: () => (/* binding */ validateEmail),\n/* harmony export */   validateMCPServerConfig: () => (/* binding */ validateMCPServerConfig),\n/* harmony export */   validateRunToolRequest: () => (/* binding */ validateRunToolRequest),\n/* harmony export */   validateSettings: () => (/* binding */ validateSettings),\n/* harmony export */   validateStringLength: () => (/* binding */ validateStringLength),\n/* harmony export */   validateToolCall: () => (/* binding */ validateToolCall),\n/* harmony export */   validateUrl: () => (/* binding */ validateUrl),\n/* harmony export */   validateUserPreferences: () => (/* binding */ validateUserPreferences)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ \"(rsc)/./src/lib/errors.ts\");\n\nfunction validateChatRequest(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Request body must be a valid JSON object');\n    }\n    const { messages, sessionId, provider, model, apiKey, baseUrl, systemPrompt, temperature, maxTokens, availableTools } = data;\n    if (!Array.isArray(messages)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages must be an array');\n    }\n    if (messages.length === 0) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages array cannot be empty');\n    }\n    // Validate each message\n    messages.forEach((message, index)=>{\n        if (!message.id || typeof message.id !== 'string' || message.id.trim().length === 0) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid non-empty id`);\n        }\n        // Validate message ID format (prevent injection)\n        if (!/^[a-zA-Z0-9_-]+$/.test(message.id)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} has invalid ID format`);\n        }\n        if (!message.role || ![\n            'user',\n            'assistant',\n            'tool',\n            'system'\n        ].includes(message.role)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have a valid role`);\n        }\n        if (typeof message.content !== 'string') {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} must have string content`);\n        }\n        // Validate content length\n        validateStringLength(message.content, `Message ${index} content`, 50000);\n        // Sanitize message content to prevent XSS\n        message.content = sanitizeInput(message.content);\n        // Validate timestamp if present\n        if (message.timestamp && !(message.timestamp instanceof Date) && isNaN(Date.parse(message.timestamp))) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Message at index ${index} has invalid timestamp`);\n        }\n        // Validate tool calls if present\n        if (message.toolCalls && Array.isArray(message.toolCalls)) {\n            message.toolCalls.forEach((toolCall, toolIndex)=>{\n                validateToolCall(toolCall, `Message ${index}, tool call ${toolIndex}`);\n            });\n        }\n    });\n    if (!sessionId || typeof sessionId !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID must be a valid string');\n    }\n    // Validate session ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(sessionId)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID contains invalid characters');\n    }\n    validateStringLength(sessionId, 'Session ID', 100);\n    if (!provider || ![\n        'openai',\n        'deepseek',\n        'openrouter'\n    ].includes(provider)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Provider must be one of: openai, deepseek, openrouter');\n    }\n    if (!model || typeof model !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Model must be a valid string');\n    }\n    // Validate optional parameters\n    if (apiKey !== undefined && typeof apiKey !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key must be a string');\n    }\n    if (baseUrl !== undefined && typeof baseUrl !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Base URL must be a string');\n    }\n    if (systemPrompt !== undefined && typeof systemPrompt !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('System prompt must be a string');\n    }\n    if (temperature !== undefined && (typeof temperature !== 'number' || temperature < 0 || temperature > 2)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Temperature must be a number between 0 and 2');\n    }\n    if (maxTokens !== undefined && (typeof maxTokens !== 'number' || maxTokens <= 0)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Max tokens must be a positive number');\n    }\n    if (availableTools !== undefined && !Array.isArray(availableTools)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Available tools must be an array');\n    }\n    return {\n        messages: messages.map((msg)=>({\n                ...msg,\n                timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date()\n            })),\n        sessionId,\n        provider: provider,\n        model,\n        apiKey,\n        baseUrl,\n        systemPrompt,\n        temperature,\n        maxTokens,\n        availableTools\n    };\n}\nfunction validateRunToolRequest(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Request body must be a valid JSON object');\n    }\n    const { toolCall, sessionId, messages } = data;\n    validateToolCall(toolCall, 'Tool call');\n    if (!sessionId || typeof sessionId !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Session ID must be a valid string');\n    }\n    if (!Array.isArray(messages)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Messages must be an array');\n    }\n    return {\n        toolCall,\n        sessionId,\n        messages: messages.map((msg)=>({\n                ...msg,\n                timestamp: msg.timestamp ? new Date(msg.timestamp) : new Date()\n            }))\n    };\n}\nfunction validateSettings(data) {\n    if (!data || typeof data !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Settings must be a valid JSON object');\n    }\n    // Validate LLM providers if present\n    if (data.llmProviders) {\n        if (!Array.isArray(data.llmProviders)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('LLM providers must be an array');\n        }\n        data.llmProviders.forEach((provider, index)=>{\n            if (!provider || typeof provider !== 'object') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must be a valid object`);\n            }\n            if (!provider.id || typeof provider.id !== 'string') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must have a valid id`);\n            }\n            if (!/^[a-zA-Z0-9_-]+$/.test(provider.id)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} has invalid ID format`);\n            }\n            if (!provider.name || ![\n                'openai',\n                'deepseek',\n                'openrouter'\n            ].includes(provider.name)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} must have a valid name`);\n            }\n            // Only validate API key if it's provided, not empty, and not masked\n            if (provider.apiKey && typeof provider.apiKey === 'string' && provider.apiKey.trim() !== '' && !provider.apiKey.includes('*') && !provider.apiKey.includes('•')) {\n                validateApiKey(provider.apiKey, provider.name);\n            }\n            if (provider.baseUrl && typeof provider.baseUrl === 'string') {\n                if (!validateUrl(provider.baseUrl)) {\n                    throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`LLM provider at index ${index} has invalid base URL`);\n                }\n            }\n        });\n    }\n    // Validate MCP servers if present\n    if (data.mcpServers) {\n        if (!Array.isArray(data.mcpServers)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP servers must be an array');\n        }\n        data.mcpServers.forEach((server, index)=>{\n            try {\n                validateMCPServerConfig(server);\n            } catch (error) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`MCP server at index ${index}: ${error.message}`);\n            }\n        });\n    }\n    // Validate preferences if present\n    if (data.preferences) {\n        try {\n            validateUserPreferences(data.preferences);\n        } catch (error) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`User preferences: ${error.message}`);\n        }\n    }\n    return data;\n}\nfunction sanitizeInput(input) {\n    if (typeof input !== 'string') {\n        return '';\n    }\n    // Enhanced XSS prevention\n    return input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '').replace(/<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi, '').replace(/<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi, '').replace(/<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi, '').replace(/javascript:/gi, '').replace(/vbscript:/gi, '').replace(/data:text\\/html/gi, '').replace(/on\\w+\\s*=/gi, '').replace(/style\\s*=\\s*[\"'][^\"']*expression\\s*\\(/gi, '').trim();\n}\nfunction validateStringLength(input, fieldName, maxLength = 1000) {\n    if (input.length > maxLength) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${fieldName} exceeds maximum length of ${maxLength} characters`);\n    }\n}\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\nfunction validateUrl(url) {\n    try {\n        const parsed = new URL(url);\n        return [\n            'http:',\n            'https:'\n        ].includes(parsed.protocol);\n    } catch  {\n        return false;\n    }\n}\nfunction validateToolCall(toolCall, context = 'Tool call') {\n    if (!toolCall || typeof toolCall !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must be a valid object`);\n    }\n    if (!toolCall.id || typeof toolCall.id !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must have a valid id`);\n    }\n    // Validate tool call ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(toolCall.id)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} has invalid ID format`);\n    }\n    if (toolCall.type !== 'function') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} type must be \"function\"`);\n    }\n    if (!toolCall.function || typeof toolCall.function !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} must have a valid function object`);\n    }\n    if (!toolCall.function.name || typeof toolCall.function.name !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function must have a valid name`);\n    }\n    // Validate function name format (prevent injection)\n    if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(toolCall.function.name)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function name has invalid format`);\n    }\n    validateStringLength(toolCall.function.name, `${context} function name`, 100);\n    if (typeof toolCall.function.arguments !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function arguments must be a string`);\n    }\n    // Validate arguments as JSON\n    try {\n        JSON.parse(toolCall.function.arguments);\n    } catch  {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`${context} function arguments must be valid JSON`);\n    }\n    validateStringLength(toolCall.function.arguments, `${context} function arguments`, 10000);\n}\nfunction validateApiKey(apiKey, provider) {\n    if (!apiKey || typeof apiKey !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key must be a valid string');\n    }\n    // Basic length validation\n    if (apiKey.length < 10) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key is too short');\n    }\n    if (apiKey.length > 200) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key is too long');\n    }\n    // Provider-specific validation\n    switch(provider){\n        case 'openai':\n            if (!apiKey.startsWith('sk-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('OpenAI API key must start with \"sk-\"');\n            }\n            break;\n        case 'deepseek':\n            if (!apiKey.startsWith('sk-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('DeepSeek API key must start with \"sk-\"');\n            }\n            break;\n        case 'openrouter':\n            if (!apiKey.startsWith('sk-or-')) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('OpenRouter API key must start with \"sk-or-\"');\n            }\n            break;\n    }\n    // Check for suspicious patterns\n    const suspiciousPatterns = [\n        /\\s/,\n        /[<>]/,\n        /javascript:/i,\n        /data:/i\n    ];\n    for (const pattern of suspiciousPatterns){\n        if (pattern.test(apiKey)) {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('API key contains invalid characters');\n        }\n    }\n}\nfunction validateMCPServerConfig(config) {\n    if (!config || typeof config !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must be a valid object');\n    }\n    if (!config.id || typeof config.id !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid id');\n    }\n    // Validate ID format\n    if (!/^[a-zA-Z0-9_-]+$/.test(config.id)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config ID has invalid format');\n    }\n    if (!config.name || typeof config.name !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid name');\n    }\n    validateStringLength(config.name, 'MCP server name', 100);\n    if (!config.command || typeof config.command !== 'string') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server config must have a valid command');\n    }\n    // Validate command (prevent command injection)\n    if (!/^[a-zA-Z0-9_./\\-]+$/.test(config.command)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server command contains invalid characters');\n    }\n    if (!Array.isArray(config.args)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server args must be an array');\n    }\n    // Validate each argument\n    config.args.forEach((arg, index)=>{\n        if (typeof arg !== 'string') {\n            throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`MCP server arg at index ${index} must be a string`);\n        }\n        validateStringLength(arg, `MCP server arg ${index}`, 500);\n    });\n    // Validate environment variables if present\n    if (config.env && typeof config.env === 'object') {\n        Object.entries(config.env).forEach(([key, value])=>{\n            if (typeof key !== 'string' || typeof value !== 'string') {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('MCP server environment variables must be strings');\n            }\n            // Validate environment variable names\n            if (!/^[A-Z_][A-Z0-9_]*$/.test(key)) {\n                throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError(`Invalid environment variable name: ${key}`);\n            }\n            validateStringLength(key, 'Environment variable name', 100);\n            validateStringLength(value, 'Environment variable value', 1000);\n        });\n    }\n}\nfunction validateUserPreferences(preferences) {\n    if (!preferences || typeof preferences !== 'object') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('User preferences must be a valid object');\n    }\n    if (preferences.theme && ![\n        'light',\n        'dark',\n        'system'\n    ].includes(preferences.theme)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Theme must be one of: light, dark, system');\n    }\n    if (preferences.language && ![\n        'en',\n        'zh'\n    ].includes(preferences.language)) {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('Language must be one of: en, zh');\n    }\n    if (preferences.autoScroll !== undefined && typeof preferences.autoScroll !== 'boolean') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('autoScroll must be a boolean');\n    }\n    if (preferences.soundEnabled !== undefined && typeof preferences.soundEnabled !== 'boolean') {\n        throw new _errors__WEBPACK_IMPORTED_MODULE_0__.ValidationError('soundEnabled must be a boolean');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/validation.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/SecureSettingsManager.ts":
/*!***********************************************!*\
  !*** ./src/services/SecureSettingsManager.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SecureSettingsManager: () => (/* binding */ SecureSettingsManager),\n/* harmony export */   getSecureSettingsManager: () => (/* binding */ getSecureSettingsManager),\n/* harmony export */   initializeSecureSettingsManager: () => (/* binding */ initializeSecureSettingsManager)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_encryption__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/encryption */ \"(rsc)/./src/lib/encryption.ts\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/errors */ \"(rsc)/./src/lib/errors.ts\");\n\n\n\n\nclass SecureSettingsManager {\n    constructor(settingsDir = './data/settings'){\n        this.encryptionService = (0,_lib_encryption__WEBPACK_IMPORTED_MODULE_2__.getEncryptionService)();\n        this.settingsDir = settingsDir;\n        this.settingsFile = path__WEBPACK_IMPORTED_MODULE_1___default().join(settingsDir, 'settings.json');\n        this.settings = this.getDefaultSettings();\n    }\n    /**\n   * Initialize the settings manager and load existing settings\n   */ async initialize() {\n        try {\n            await this.ensureSettingsDirectory();\n            await this.loadSettings();\n        } catch (error) {\n            console.error('Failed to initialize SecureSettingsManager:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to initialize settings storage');\n        }\n    }\n    /**\n   * Get current settings with masked API keys for frontend display\n   */ async getSettings() {\n        const settings = {\n            ...this.settings\n        };\n        // Mask API keys for frontend display\n        settings.llmProviders = settings.llmProviders.map((provider)=>({\n                ...provider,\n                apiKey: this.encryptionService.maskApiKey(provider.apiKey ? this.encryptionService.decrypt(provider.apiKey) : '')\n            }));\n        return settings;\n    }\n    /**\n   * Update settings with secure API key handling\n   */ async updateSettings(newSettings) {\n        try {\n            // Handle LLM provider updates with encryption\n            if (newSettings.llmProviders) {\n                const updatedProviders = [];\n                for (const provider of newSettings.llmProviders){\n                    const existingProvider = this.settings.llmProviders.find((p)=>p.id === provider.id);\n                    let encryptedApiKey = '';\n                    let apiKeyHash = '';\n                    if (provider.apiKey) {\n                        // Check if API key is already masked (unchanged from frontend)\n                        if (provider.apiKey.includes('*')) {\n                            // Keep existing encrypted key\n                            if (existingProvider) {\n                                encryptedApiKey = existingProvider.apiKey;\n                                apiKeyHash = existingProvider.apiKeyHash || '';\n                            }\n                        } else {\n                            // New or updated API key - encrypt it\n                            encryptedApiKey = this.encryptionService.encrypt(provider.apiKey);\n                            apiKeyHash = this.encryptionService.hash(provider.apiKey);\n                        }\n                    }\n                    updatedProviders.push({\n                        ...provider,\n                        apiKey: encryptedApiKey,\n                        apiKeyHash\n                    });\n                }\n                this.settings.llmProviders = updatedProviders;\n            }\n            // Update other settings\n            if (newSettings.mcpServers) {\n                this.settings.mcpServers = newSettings.mcpServers;\n            }\n            if (newSettings.preferences) {\n                this.settings.preferences = {\n                    ...this.settings.preferences,\n                    ...newSettings.preferences\n                };\n            }\n            await this.saveSettings();\n            return this.getSettings();\n        } catch (error) {\n            console.error('Failed to update settings:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to update settings');\n        }\n    }\n    /**\n   * Get decrypted API key for a specific provider (for backend use only)\n   */ async getDecryptedApiKey(providerId) {\n        const provider = this.settings.llmProviders.find((p)=>p.id === providerId);\n        if (!provider || !provider.apiKey) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError(`API key not found for provider: ${providerId}`);\n        }\n        try {\n            return this.encryptionService.decrypt(provider.apiKey);\n        } catch (error) {\n            console.error(`Failed to decrypt API key for provider ${providerId}:`, error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to decrypt API key');\n        }\n    }\n    /**\n   * Validate API key without storing it\n   */ async validateApiKey(provider, apiKey, baseUrl) {\n        // This would integrate with LLMService to test the API key\n        // For now, just validate format\n        if (!apiKey || apiKey.length < 10) {\n            return false;\n        }\n        // Basic format validation based on provider\n        switch(provider){\n            case 'openai':\n                return apiKey.startsWith('sk-') && apiKey.length > 20;\n            case 'deepseek':\n                return apiKey.startsWith('sk-') && apiKey.length > 20;\n            case 'openrouter':\n                return apiKey.startsWith('sk-or-') && apiKey.length > 30;\n            default:\n                return apiKey.length > 10;\n        }\n    }\n    /**\n   * Export settings for backup (excludes sensitive data)\n   */ async exportSettings() {\n        return {\n            version: '1.0.0',\n            exportDate: new Date().toISOString(),\n            settings: {\n                preferences: this.settings.preferences,\n                mcpServers: this.settings.mcpServers.map((server)=>({\n                        ...server,\n                        // Remove any sensitive environment variables\n                        env: server.env ? this.sanitizeEnvironmentVariables(server.env) : undefined\n                    }))\n            }\n        };\n    }\n    /**\n   * Import settings from backup (user must re-enter API keys)\n   */ async importSettings(exportData) {\n        try {\n            if (exportData.version !== '1.0.0') {\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.ValidationError('Unsupported settings export version');\n            }\n            // Import non-sensitive settings\n            await this.updateSettings({\n                preferences: exportData.settings.preferences,\n                mcpServers: exportData.settings.mcpServers\n            });\n        } catch (error) {\n            console.error('Failed to import settings:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to import settings');\n        }\n    }\n    /**\n   * Clear all sensitive data (API keys)\n   */ async clearSensitiveData() {\n        this.settings.llmProviders = this.settings.llmProviders.map((provider)=>({\n                ...provider,\n                apiKey: '',\n                apiKeyHash: ''\n            }));\n        await this.saveSettings();\n    }\n    /**\n   * Get settings statistics for monitoring\n   */ getStatistics() {\n        const providersWithKeys = this.settings.llmProviders.filter((p)=>p.apiKey).length;\n        const enabledMcpServers = this.settings.mcpServers.filter((s)=>s.enabled).length;\n        return {\n            totalProviders: this.settings.llmProviders.length,\n            providersWithKeys,\n            totalMcpServers: this.settings.mcpServers.length,\n            enabledMcpServers,\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    // Private methods\n    getDefaultSettings() {\n        return {\n            llmProviders: [\n                {\n                    id: 'openai-1',\n                    name: 'openai',\n                    apiKey: '',\n                    baseUrl: 'https://api.openai.com/v1',\n                    models: [\n                        {\n                            id: 'gpt-4',\n                            name: 'GPT-4',\n                            supportsToolCalling: true,\n                            maxTokens: 8192\n                        },\n                        {\n                            id: 'gpt-3.5-turbo',\n                            name: 'GPT-3.5 Turbo',\n                            supportsToolCalling: true,\n                            maxTokens: 4096\n                        }\n                    ]\n                },\n                {\n                    id: 'deepseek-1',\n                    name: 'deepseek',\n                    apiKey: '',\n                    baseUrl: 'https://api.deepseek.com/v1',\n                    models: [\n                        {\n                            id: 'deepseek-chat',\n                            name: 'DeepSeek Chat',\n                            supportsToolCalling: true,\n                            maxTokens: 4096\n                        }\n                    ]\n                },\n                {\n                    id: 'openrouter-1',\n                    name: 'openrouter',\n                    apiKey: '',\n                    baseUrl: 'https://openrouter.ai/api/v1',\n                    models: [\n                        {\n                            id: 'openai/gpt-4',\n                            name: 'GPT-4 (OpenRouter)',\n                            supportsToolCalling: true,\n                            maxTokens: 8192\n                        }\n                    ]\n                }\n            ],\n            mcpServers: [\n                {\n                    id: 'filesystem-1',\n                    name: 'filesystem',\n                    command: 'npx',\n                    args: [\n                        '-y',\n                        '@modelcontextprotocol/server-filesystem',\n                        '/tmp'\n                    ],\n                    enabled: false,\n                    status: 'disconnected'\n                }\n            ],\n            preferences: {\n                theme: 'system',\n                language: 'en',\n                autoScroll: true,\n                soundEnabled: false\n            }\n        };\n    }\n    async ensureSettingsDirectory() {\n        try {\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.mkdir(this.settingsDir, {\n                recursive: true\n            });\n        } catch (error) {\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError(`Failed to create settings directory: ${error}`);\n        }\n    }\n    async loadSettings() {\n        try {\n            const data = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(this.settingsFile, 'utf-8');\n            const parsed = JSON.parse(data);\n            // Validate and merge with defaults\n            this.settings = {\n                ...this.getDefaultSettings(),\n                ...parsed\n            };\n        } catch (error) {\n            if (error.code === 'ENOENT') {\n                // File doesn't exist, use defaults and save\n                this.settings = this.getDefaultSettings();\n                await this.saveSettings();\n            } else {\n                console.error('Failed to load settings:', error);\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to load settings data');\n            }\n        }\n    }\n    async saveSettings() {\n        try {\n            const data = JSON.stringify(this.settings, null, 2);\n            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.writeFile(this.settingsFile, data, 'utf-8');\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_3__.InternalServerError('Failed to save settings data');\n        }\n    }\n    sanitizeEnvironmentVariables(env) {\n        const sanitized = {};\n        const sensitiveKeys = [\n            'api_key',\n            'secret',\n            'token',\n            'password',\n            'key'\n        ];\n        for (const [key, value] of Object.entries(env)){\n            const lowerKey = key.toLowerCase();\n            const isSensitive = sensitiveKeys.some((sensitive)=>lowerKey.includes(sensitive));\n            if (isSensitive) {\n                sanitized[key] = '[REDACTED]';\n            } else {\n                sanitized[key] = value;\n            }\n        }\n        return sanitized;\n    }\n}\n// Singleton instance\nlet settingsManagerInstance = null;\nfunction getSecureSettingsManager() {\n    if (!settingsManagerInstance) {\n        settingsManagerInstance = new SecureSettingsManager();\n    }\n    return settingsManagerInstance;\n}\nasync function initializeSecureSettingsManager() {\n    const manager = getSecureSettingsManager();\n    await manager.initialize();\n    return manager;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvc2VydmljZXMvU2VjdXJlU2V0dGluZ3NNYW5hZ2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFvQztBQUNaO0FBRWdDO0FBQ1k7QUFxQjdELE1BQU1NO0lBTVgsWUFBWUMsY0FBc0IsaUJBQWlCLENBQUU7YUFIcENDLG9CQUFvQkwscUVBQW9CQTtRQUl2RCxJQUFJLENBQUNJLFdBQVcsR0FBR0E7UUFDbkIsSUFBSSxDQUFDRSxZQUFZLEdBQUdQLGdEQUFTLENBQUNLLGFBQWE7UUFDM0MsSUFBSSxDQUFDSSxRQUFRLEdBQUcsSUFBSSxDQUFDQyxrQkFBa0I7SUFDekM7SUFFQTs7R0FFQyxHQUNELE1BQU1DLGFBQTRCO1FBQ2hDLElBQUk7WUFDRixNQUFNLElBQUksQ0FBQ0MsdUJBQXVCO1lBQ2xDLE1BQU0sSUFBSSxDQUFDQyxZQUFZO1FBQ3pCLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsK0NBQStDQTtZQUM3RCxNQUFNLElBQUlaLDREQUFtQkEsQ0FBQztRQUNoQztJQUNGO0lBRUE7O0dBRUMsR0FDRCxNQUFNYyxjQUFpQztRQUNyQyxNQUFNUCxXQUFXO1lBQUUsR0FBRyxJQUFJLENBQUNBLFFBQVE7UUFBQztRQUVwQyxxQ0FBcUM7UUFDckNBLFNBQVNRLFlBQVksR0FBR1IsU0FBU1EsWUFBWSxDQUFDQyxHQUFHLENBQUNDLENBQUFBLFdBQWE7Z0JBQzdELEdBQUdBLFFBQVE7Z0JBQ1hDLFFBQVEsSUFBSSxDQUFDZCxpQkFBaUIsQ0FBQ2UsVUFBVSxDQUN2Q0YsU0FBU0MsTUFBTSxHQUFHLElBQUksQ0FBQ2QsaUJBQWlCLENBQUNnQixPQUFPLENBQUNILFNBQVNDLE1BQU0sSUFBSTtZQUV4RTtRQUVBLE9BQU9YO0lBQ1Q7SUFFQTs7R0FFQyxHQUNELE1BQU1jLGVBQWVDLFdBQThCLEVBQXFCO1FBQ3RFLElBQUk7WUFDRiw4Q0FBOEM7WUFDOUMsSUFBSUEsWUFBWVAsWUFBWSxFQUFFO2dCQUM1QixNQUFN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QixPQUFPMEY7QUFDVCIsInNvdXJjZXMiOlsiL1VzZXJzL29uZWJpcmQvZ2l0aHViL2Vib29rLW1jcC9tY3AtY2hhdC11aS9iYWNrZW5kL3NyYy9zZXJ2aWNlcy9TZWN1cmVTZXR0aW5nc01hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvbWlzZXMgYXMgZnMgfSBmcm9tICdmcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFNldHRpbmdzLCBMTE1Qcm92aWRlckNvbmZpZywgTUNQU2VydmVyQ29uZmlnLCBVc2VyUHJlZmVyZW5jZXMgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGdldEVuY3J5cHRpb25TZXJ2aWNlIH0gZnJvbSAnQC9saWIvZW5jcnlwdGlvbic7XG5pbXBvcnQgeyBJbnRlcm5hbFNlcnZlckVycm9yLCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICdAL2xpYi9lcnJvcnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyZVNldHRpbmdzIGV4dGVuZHMgT21pdDxTZXR0aW5ncywgJ2xsbVByb3ZpZGVycyc+IHtcbiAgbGxtUHJvdmlkZXJzOiBTZWN1cmVMTE1Qcm92aWRlckNvbmZpZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlY3VyZUxMTVByb3ZpZGVyQ29uZmlnIGV4dGVuZHMgT21pdDxMTE1Qcm92aWRlckNvbmZpZywgJ2FwaUtleSc+IHtcbiAgYXBpS2V5OiBzdHJpbmc7IC8vIFRoaXMgd2lsbCBiZSBlbmNyeXB0ZWRcbiAgYXBpS2V5SGFzaD86IHN0cmluZzsgLy8gRm9yIHZhbGlkYXRpb24gd2l0aG91dCBkZWNyeXB0aW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3NFeHBvcnQge1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIGV4cG9ydERhdGU6IHN0cmluZztcbiAgc2V0dGluZ3M6IHtcbiAgICBwcmVmZXJlbmNlczogVXNlclByZWZlcmVuY2VzO1xuICAgIG1jcFNlcnZlcnM6IE1DUFNlcnZlckNvbmZpZ1tdO1xuICAgIC8vIEFQSSBrZXlzIGFyZSBleGNsdWRlZCBmcm9tIGV4cG9ydHMgZm9yIHNlY3VyaXR5XG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBTZWN1cmVTZXR0aW5nc01hbmFnZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNldHRpbmdzRGlyOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2V0dGluZ3NGaWxlOiBzdHJpbmc7XG4gIHByaXZhdGUgcmVhZG9ubHkgZW5jcnlwdGlvblNlcnZpY2UgPSBnZXRFbmNyeXB0aW9uU2VydmljZSgpO1xuICBwcml2YXRlIHNldHRpbmdzOiBTZWN1cmVTZXR0aW5ncztcblxuICBjb25zdHJ1Y3RvcihzZXR0aW5nc0Rpcjogc3RyaW5nID0gJy4vZGF0YS9zZXR0aW5ncycpIHtcbiAgICB0aGlzLnNldHRpbmdzRGlyID0gc2V0dGluZ3NEaXI7XG4gICAgdGhpcy5zZXR0aW5nc0ZpbGUgPSBwYXRoLmpvaW4oc2V0dGluZ3NEaXIsICdzZXR0aW5ncy5qc29uJyk7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHRoaXMuZ2V0RGVmYXVsdFNldHRpbmdzKCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgc2V0dGluZ3MgbWFuYWdlciBhbmQgbG9hZCBleGlzdGluZyBzZXR0aW5nc1xuICAgKi9cbiAgYXN5bmMgaW5pdGlhbGl6ZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5lbnN1cmVTZXR0aW5nc0RpcmVjdG9yeSgpO1xuICAgICAgYXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgU2VjdXJlU2V0dGluZ3NNYW5hZ2VyOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBJbnRlcm5hbFNlcnZlckVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBzZXR0aW5ncyBzdG9yYWdlJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IHNldHRpbmdzIHdpdGggbWFza2VkIEFQSSBrZXlzIGZvciBmcm9udGVuZCBkaXNwbGF5XG4gICAqL1xuICBhc3luYyBnZXRTZXR0aW5ncygpOiBQcm9taXNlPFNldHRpbmdzPiB7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB7IC4uLnRoaXMuc2V0dGluZ3MgfTtcbiAgICBcbiAgICAvLyBNYXNrIEFQSSBrZXlzIGZvciBmcm9udGVuZCBkaXNwbGF5XG4gICAgc2V0dGluZ3MubGxtUHJvdmlkZXJzID0gc2V0dGluZ3MubGxtUHJvdmlkZXJzLm1hcChwcm92aWRlciA9PiAoe1xuICAgICAgLi4ucHJvdmlkZXIsXG4gICAgICBhcGlLZXk6IHRoaXMuZW5jcnlwdGlvblNlcnZpY2UubWFza0FwaUtleShcbiAgICAgICAgcHJvdmlkZXIuYXBpS2V5ID8gdGhpcy5lbmNyeXB0aW9uU2VydmljZS5kZWNyeXB0KHByb3ZpZGVyLmFwaUtleSkgOiAnJ1xuICAgICAgKSxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gc2V0dGluZ3M7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHNldHRpbmdzIHdpdGggc2VjdXJlIEFQSSBrZXkgaGFuZGxpbmdcbiAgICovXG4gIGFzeW5jIHVwZGF0ZVNldHRpbmdzKG5ld1NldHRpbmdzOiBQYXJ0aWFsPFNldHRpbmdzPik6IFByb21pc2U8U2V0dGluZ3M+IHtcbiAgICB0cnkge1xuICAgICAgLy8gSGFuZGxlIExMTSBwcm92aWRlciB1cGRhdGVzIHdpdGggZW5jcnlwdGlvblxuICAgICAgaWYgKG5ld1NldHRpbmdzLmxsbVByb3ZpZGVycykge1xuICAgICAgICBjb25zdCB1cGRhdGVkUHJvdmlkZXJzOiBTZWN1cmVMTE1Qcm92aWRlckNvbmZpZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIG5ld1NldHRpbmdzLmxsbVByb3ZpZGVycykge1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nUHJvdmlkZXIgPSB0aGlzLnNldHRpbmdzLmxsbVByb3ZpZGVycy5maW5kKHAgPT4gcC5pZCA9PT0gcHJvdmlkZXIuaWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIGxldCBlbmNyeXB0ZWRBcGlLZXkgPSAnJztcbiAgICAgICAgICBsZXQgYXBpS2V5SGFzaCA9ICcnO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChwcm92aWRlci5hcGlLZXkpIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIEFQSSBrZXkgaXMgYWxyZWFkeSBtYXNrZWQgKHVuY2hhbmdlZCBmcm9tIGZyb250ZW5kKVxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyLmFwaUtleS5pbmNsdWRlcygnKicpKSB7XG4gICAgICAgICAgICAgIC8vIEtlZXAgZXhpc3RpbmcgZW5jcnlwdGVkIGtleVxuICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdQcm92aWRlcikge1xuICAgICAgICAgICAgICAgIGVuY3J5cHRlZEFwaUtleSA9IGV4aXN0aW5nUHJvdmlkZXIuYXBpS2V5O1xuICAgICAgICAgICAgICAgIGFwaUtleUhhc2ggPSBleGlzdGluZ1Byb3ZpZGVyLmFwaUtleUhhc2ggfHwgJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIE5ldyBvciB1cGRhdGVkIEFQSSBrZXkgLSBlbmNyeXB0IGl0XG4gICAgICAgICAgICAgIGVuY3J5cHRlZEFwaUtleSA9IHRoaXMuZW5jcnlwdGlvblNlcnZpY2UuZW5jcnlwdChwcm92aWRlci5hcGlLZXkpO1xuICAgICAgICAgICAgICBhcGlLZXlIYXNoID0gdGhpcy5lbmNyeXB0aW9uU2VydmljZS5oYXNoKHByb3ZpZGVyLmFwaUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlZFByb3ZpZGVycy5wdXNoKHtcbiAgICAgICAgICAgIC4uLnByb3ZpZGVyLFxuICAgICAgICAgICAgYXBpS2V5OiBlbmNyeXB0ZWRBcGlLZXksXG4gICAgICAgICAgICBhcGlLZXlIYXNoLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNldHRpbmdzLmxsbVByb3ZpZGVycyA9IHVwZGF0ZWRQcm92aWRlcnM7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBvdGhlciBzZXR0aW5nc1xuICAgICAgaWYgKG5ld1NldHRpbmdzLm1jcFNlcnZlcnMpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5tY3BTZXJ2ZXJzID0gbmV3U2V0dGluZ3MubWNwU2VydmVycztcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1NldHRpbmdzLnByZWZlcmVuY2VzKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MucHJlZmVyZW5jZXMgPSB7IC4uLnRoaXMuc2V0dGluZ3MucHJlZmVyZW5jZXMsIC4uLm5ld1NldHRpbmdzLnByZWZlcmVuY2VzIH07XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTZXR0aW5ncygpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgIHRocm93IG5ldyBJbnRlcm5hbFNlcnZlckVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIHNldHRpbmdzJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkZWNyeXB0ZWQgQVBJIGtleSBmb3IgYSBzcGVjaWZpYyBwcm92aWRlciAoZm9yIGJhY2tlbmQgdXNlIG9ubHkpXG4gICAqL1xuICBhc3luYyBnZXREZWNyeXB0ZWRBcGlLZXkocHJvdmlkZXJJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuc2V0dGluZ3MubGxtUHJvdmlkZXJzLmZpbmQocCA9PiBwLmlkID09PSBwcm92aWRlcklkKTtcbiAgICBpZiAoIXByb3ZpZGVyIHx8ICFwcm92aWRlci5hcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEFQSSBrZXkgbm90IGZvdW5kIGZvciBwcm92aWRlcjogJHtwcm92aWRlcklkfWApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gdGhpcy5lbmNyeXB0aW9uU2VydmljZS5kZWNyeXB0KHByb3ZpZGVyLmFwaUtleSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBkZWNyeXB0IEFQSSBrZXkgZm9yIHByb3ZpZGVyICR7cHJvdmlkZXJJZH06YCwgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEludGVybmFsU2VydmVyRXJyb3IoJ0ZhaWxlZCB0byBkZWNyeXB0IEFQSSBrZXknKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmFsaWRhdGUgQVBJIGtleSB3aXRob3V0IHN0b3JpbmcgaXRcbiAgICovXG4gIGFzeW5jIHZhbGlkYXRlQXBpS2V5KHByb3ZpZGVyOiBzdHJpbmcsIGFwaUtleTogc3RyaW5nLCBiYXNlVXJsPzogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgLy8gVGhpcyB3b3VsZCBpbnRlZ3JhdGUgd2l0aCBMTE1TZXJ2aWNlIHRvIHRlc3QgdGhlIEFQSSBrZXlcbiAgICAvLyBGb3Igbm93LCBqdXN0IHZhbGlkYXRlIGZvcm1hdFxuICAgIGlmICghYXBpS2V5IHx8IGFwaUtleS5sZW5ndGggPCAxMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEJhc2ljIGZvcm1hdCB2YWxpZGF0aW9uIGJhc2VkIG9uIHByb3ZpZGVyXG4gICAgc3dpdGNoIChwcm92aWRlcikge1xuICAgICAgY2FzZSAnb3BlbmFpJzpcbiAgICAgICAgcmV0dXJuIGFwaUtleS5zdGFydHNXaXRoKCdzay0nKSAmJiBhcGlLZXkubGVuZ3RoID4gMjA7XG4gICAgICBjYXNlICdkZWVwc2Vlayc6XG4gICAgICAgIHJldHVybiBhcGlLZXkuc3RhcnRzV2l0aCgnc2stJykgJiYgYXBpS2V5Lmxlbmd0aCA+IDIwO1xuICAgICAgY2FzZSAnb3BlbnJvdXRlcic6XG4gICAgICAgIHJldHVybiBhcGlLZXkuc3RhcnRzV2l0aCgnc2stb3ItJykgJiYgYXBpS2V5Lmxlbmd0aCA+IDMwO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGFwaUtleS5sZW5ndGggPiAxMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRXhwb3J0IHNldHRpbmdzIGZvciBiYWNrdXAgKGV4Y2x1ZGVzIHNlbnNpdGl2ZSBkYXRhKVxuICAgKi9cbiAgYXN5bmMgZXhwb3J0U2V0dGluZ3MoKTogUHJvbWlzZTxTZXR0aW5nc0V4cG9ydD4ge1xuICAgIHJldHVybiB7XG4gICAgICB2ZXJzaW9uOiAnMS4wLjAnLFxuICAgICAgZXhwb3J0RGF0ZTogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgcHJlZmVyZW5jZXM6IHRoaXMuc2V0dGluZ3MucHJlZmVyZW5jZXMsXG4gICAgICAgIG1jcFNlcnZlcnM6IHRoaXMuc2V0dGluZ3MubWNwU2VydmVycy5tYXAoc2VydmVyID0+ICh7XG4gICAgICAgICAgLi4uc2VydmVyLFxuICAgICAgICAgIC8vIFJlbW92ZSBhbnkgc2Vuc2l0aXZlIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgICAgICAgIGVudjogc2VydmVyLmVudiA/IHRoaXMuc2FuaXRpemVFbnZpcm9ubWVudFZhcmlhYmxlcyhzZXJ2ZXIuZW52KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSkpLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEltcG9ydCBzZXR0aW5ncyBmcm9tIGJhY2t1cCAodXNlciBtdXN0IHJlLWVudGVyIEFQSSBrZXlzKVxuICAgKi9cbiAgYXN5bmMgaW1wb3J0U2V0dGluZ3MoZXhwb3J0RGF0YTogU2V0dGluZ3NFeHBvcnQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKGV4cG9ydERhdGEudmVyc2lvbiAhPT0gJzEuMC4wJykge1xuICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCdVbnN1cHBvcnRlZCBzZXR0aW5ncyBleHBvcnQgdmVyc2lvbicpO1xuICAgICAgfVxuXG4gICAgICAvLyBJbXBvcnQgbm9uLXNlbnNpdGl2ZSBzZXR0aW5nc1xuICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZXR0aW5ncyh7XG4gICAgICAgIHByZWZlcmVuY2VzOiBleHBvcnREYXRhLnNldHRpbmdzLnByZWZlcmVuY2VzLFxuICAgICAgICBtY3BTZXJ2ZXJzOiBleHBvcnREYXRhLnNldHRpbmdzLm1jcFNlcnZlcnMsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGltcG9ydCBzZXR0aW5nczonLCBlcnJvcik7XG4gICAgICB0aHJvdyBuZXcgSW50ZXJuYWxTZXJ2ZXJFcnJvcignRmFpbGVkIHRvIGltcG9ydCBzZXR0aW5ncycpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgc2Vuc2l0aXZlIGRhdGEgKEFQSSBrZXlzKVxuICAgKi9cbiAgYXN5bmMgY2xlYXJTZW5zaXRpdmVEYXRhKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuc2V0dGluZ3MubGxtUHJvdmlkZXJzID0gdGhpcy5zZXR0aW5ncy5sbG1Qcm92aWRlcnMubWFwKHByb3ZpZGVyID0+ICh7XG4gICAgICAuLi5wcm92aWRlcixcbiAgICAgIGFwaUtleTogJycsXG4gICAgICBhcGlLZXlIYXNoOiAnJyxcbiAgICB9KSk7XG5cbiAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzZXR0aW5ncyBzdGF0aXN0aWNzIGZvciBtb25pdG9yaW5nXG4gICAqL1xuICBnZXRTdGF0aXN0aWNzKCk6IHtcbiAgICB0b3RhbFByb3ZpZGVyczogbnVtYmVyO1xuICAgIHByb3ZpZGVyc1dpdGhLZXlzOiBudW1iZXI7XG4gICAgdG90YWxNY3BTZXJ2ZXJzOiBudW1iZXI7XG4gICAgZW5hYmxlZE1jcFNlcnZlcnM6IG51bWJlcjtcbiAgICBsYXN0VXBkYXRlZDogc3RyaW5nO1xuICB9IHtcbiAgICBjb25zdCBwcm92aWRlcnNXaXRoS2V5cyA9IHRoaXMuc2V0dGluZ3MubGxtUHJvdmlkZXJzLmZpbHRlcihwID0+IHAuYXBpS2V5KS5sZW5ndGg7XG4gICAgY29uc3QgZW5hYmxlZE1jcFNlcnZlcnMgPSB0aGlzLnNldHRpbmdzLm1jcFNlcnZlcnMuZmlsdGVyKHMgPT4gcy5lbmFibGVkKS5sZW5ndGg7XG5cbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxQcm92aWRlcnM6IHRoaXMuc2V0dGluZ3MubGxtUHJvdmlkZXJzLmxlbmd0aCxcbiAgICAgIHByb3ZpZGVyc1dpdGhLZXlzLFxuICAgICAgdG90YWxNY3BTZXJ2ZXJzOiB0aGlzLnNldHRpbmdzLm1jcFNlcnZlcnMubGVuZ3RoLFxuICAgICAgZW5hYmxlZE1jcFNlcnZlcnMsXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgIH07XG4gIH1cblxuICAvLyBQcml2YXRlIG1ldGhvZHNcblxuICBwcml2YXRlIGdldERlZmF1bHRTZXR0aW5ncygpOiBTZWN1cmVTZXR0aW5ncyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxsbVByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdvcGVuYWktMScsXG4gICAgICAgICAgbmFtZTogJ29wZW5haScsXG4gICAgICAgICAgYXBpS2V5OiAnJyxcbiAgICAgICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MScsXG4gICAgICAgICAgbW9kZWxzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnZ3B0LTQnLFxuICAgICAgICAgICAgICBuYW1lOiAnR1BULTQnLFxuICAgICAgICAgICAgICBzdXBwb3J0c1Rvb2xDYWxsaW5nOiB0cnVlLFxuICAgICAgICAgICAgICBtYXhUb2tlbnM6IDgxOTIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogJ2dwdC0zLjUtdHVyYm8nLFxuICAgICAgICAgICAgICBuYW1lOiAnR1BULTMuNSBUdXJibycsXG4gICAgICAgICAgICAgIHN1cHBvcnRzVG9vbENhbGxpbmc6IHRydWUsXG4gICAgICAgICAgICAgIG1heFRva2VuczogNDA5NixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnZGVlcHNlZWstMScsXG4gICAgICAgICAgbmFtZTogJ2RlZXBzZWVrJyxcbiAgICAgICAgICBhcGlLZXk6ICcnLFxuICAgICAgICAgIGJhc2VVcmw6ICdodHRwczovL2FwaS5kZWVwc2Vlay5jb20vdjEnLFxuICAgICAgICAgIG1vZGVsczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogJ2RlZXBzZWVrLWNoYXQnLFxuICAgICAgICAgICAgICBuYW1lOiAnRGVlcFNlZWsgQ2hhdCcsXG4gICAgICAgICAgICAgIHN1cHBvcnRzVG9vbENhbGxpbmc6IHRydWUsXG4gICAgICAgICAgICAgIG1heFRva2VuczogNDA5NixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnb3BlbnJvdXRlci0xJyxcbiAgICAgICAgICBuYW1lOiAnb3BlbnJvdXRlcicsXG4gICAgICAgICAgYXBpS2V5OiAnJyxcbiAgICAgICAgICBiYXNlVXJsOiAnaHR0cHM6Ly9vcGVucm91dGVyLmFpL2FwaS92MScsXG4gICAgICAgICAgbW9kZWxzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnb3BlbmFpL2dwdC00JyxcbiAgICAgICAgICAgICAgbmFtZTogJ0dQVC00IChPcGVuUm91dGVyKScsXG4gICAgICAgICAgICAgIHN1cHBvcnRzVG9vbENhbGxpbmc6IHRydWUsXG4gICAgICAgICAgICAgIG1heFRva2VuczogODE5MixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBtY3BTZXJ2ZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2ZpbGVzeXN0ZW0tMScsXG4gICAgICAgICAgbmFtZTogJ2ZpbGVzeXN0ZW0nLFxuICAgICAgICAgIGNvbW1hbmQ6ICducHgnLFxuICAgICAgICAgIGFyZ3M6IFsnLXknLCAnQG1vZGVsY29udGV4dHByb3RvY29sL3NlcnZlci1maWxlc3lzdGVtJywgJy90bXAnXSxcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBzdGF0dXM6ICdkaXNjb25uZWN0ZWQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHByZWZlcmVuY2VzOiB7XG4gICAgICAgIHRoZW1lOiAnc3lzdGVtJyxcbiAgICAgICAgbGFuZ3VhZ2U6ICdlbicsXG4gICAgICAgIGF1dG9TY3JvbGw6IHRydWUsXG4gICAgICAgIHNvdW5kRW5hYmxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGVuc3VyZVNldHRpbmdzRGlyZWN0b3J5KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmcy5ta2Rpcih0aGlzLnNldHRpbmdzRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEludGVybmFsU2VydmVyRXJyb3IoYEZhaWxlZCB0byBjcmVhdGUgc2V0dGluZ3MgZGlyZWN0b3J5OiAke2Vycm9yfWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZFNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZnMucmVhZEZpbGUodGhpcy5zZXR0aW5nc0ZpbGUsICd1dGYtOCcpO1xuICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIFxuICAgICAgLy8gVmFsaWRhdGUgYW5kIG1lcmdlIHdpdGggZGVmYXVsdHNcbiAgICAgIHRoaXMuc2V0dGluZ3MgPSB7XG4gICAgICAgIC4uLnRoaXMuZ2V0RGVmYXVsdFNldHRpbmdzKCksXG4gICAgICAgIC4uLnBhcnNlZCxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICgoZXJyb3IgYXMgYW55KS5jb2RlID09PSAnRU5PRU5UJykge1xuICAgICAgICAvLyBGaWxlIGRvZXNuJ3QgZXhpc3QsIHVzZSBkZWZhdWx0cyBhbmQgc2F2ZVxuICAgICAgICB0aGlzLnNldHRpbmdzID0gdGhpcy5nZXREZWZhdWx0U2V0dGluZ3MoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHNldHRpbmdzOicsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgbmV3IEludGVybmFsU2VydmVyRXJyb3IoJ0ZhaWxlZCB0byBsb2FkIHNldHRpbmdzIGRhdGEnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNhdmVTZXR0aW5ncygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHRoaXMuc2V0dGluZ3MsIG51bGwsIDIpO1xuICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKHRoaXMuc2V0dGluZ3NGaWxlLCBkYXRhLCAndXRmLTgnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3M6JywgZXJyb3IpO1xuICAgICAgdGhyb3cgbmV3IEludGVybmFsU2VydmVyRXJyb3IoJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzIGRhdGEnKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNhbml0aXplRW52aXJvbm1lbnRWYXJpYWJsZXMoZW52OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gICAgY29uc3Qgc2FuaXRpemVkOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgY29uc3Qgc2Vuc2l0aXZlS2V5cyA9IFsnYXBpX2tleScsICdzZWNyZXQnLCAndG9rZW4nLCAncGFzc3dvcmQnLCAna2V5J107XG4gICAgXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZW52KSkge1xuICAgICAgY29uc3QgbG93ZXJLZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgIGNvbnN0IGlzU2Vuc2l0aXZlID0gc2Vuc2l0aXZlS2V5cy5zb21lKHNlbnNpdGl2ZSA9PiBsb3dlcktleS5pbmNsdWRlcyhzZW5zaXRpdmUpKTtcbiAgICAgIFxuICAgICAgaWYgKGlzU2Vuc2l0aXZlKSB7XG4gICAgICAgIHNhbml0aXplZFtrZXldID0gJ1tSRURBQ1RFRF0nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2FuaXRpemVkW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHNhbml0aXplZDtcbiAgfVxufVxuXG4vLyBTaW5nbGV0b24gaW5zdGFuY2VcbmxldCBzZXR0aW5nc01hbmFnZXJJbnN0YW5jZTogU2VjdXJlU2V0dGluZ3NNYW5hZ2VyIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZWN1cmVTZXR0aW5nc01hbmFnZXIoKTogU2VjdXJlU2V0dGluZ3NNYW5hZ2VyIHtcbiAgaWYgKCFzZXR0aW5nc01hbmFnZXJJbnN0YW5jZSkge1xuICAgIHNldHRpbmdzTWFuYWdlckluc3RhbmNlID0gbmV3IFNlY3VyZVNldHRpbmdzTWFuYWdlcigpO1xuICB9XG4gIHJldHVybiBzZXR0aW5nc01hbmFnZXJJbnN0YW5jZTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRpYWxpemVTZWN1cmVTZXR0aW5nc01hbmFnZXIoKTogUHJvbWlzZTxTZWN1cmVTZXR0aW5nc01hbmFnZXI+IHtcbiAgY29uc3QgbWFuYWdlciA9IGdldFNlY3VyZVNldHRpbmdzTWFuYWdlcigpO1xuICBhd2FpdCBtYW5hZ2VyLmluaXRpYWxpemUoKTtcbiAgcmV0dXJuIG1hbmFnZXI7XG59Il0sIm5hbWVzIjpbInByb21pc2VzIiwiZnMiLCJwYXRoIiwiZ2V0RW5jcnlwdGlvblNlcnZpY2UiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiVmFsaWRhdGlvbkVycm9yIiwiU2VjdXJlU2V0dGluZ3NNYW5hZ2VyIiwic2V0dGluZ3NEaXIiLCJlbmNyeXB0aW9uU2VydmljZSIsInNldHRpbmdzRmlsZSIsImpvaW4iLCJzZXR0aW5ncyIsImdldERlZmF1bHRTZXR0aW5ncyIsImluaXRpYWxpemUiLCJlbnN1cmVTZXR0aW5nc0RpcmVjdG9yeSIsImxvYWRTZXR0aW5ncyIsImVycm9yIiwiY29uc29sZSIsImdldFNldHRpbmdzIiwibGxtUHJvdmlkZXJzIiwibWFwIiwicHJvdmlkZXIiLCJhcGlLZXkiLCJtYXNrQXBpS2V5IiwiZGVjcnlwdCIsInVwZGF0ZVNldHRpbmdzIiwibmV3U2V0dGluZ3MiLCJ1cGRhdGVkUHJvdmlkZXJzIiwiZXhpc3RpbmdQcm92aWRlciIsImZpbmQiLCJwIiwiaWQiLCJlbmNyeXB0ZWRBcGlLZXkiLCJhcGlLZXlIYXNoIiwiaW5jbHVkZXMiLCJlbmNyeXB0IiwiaGFzaCIsInB1c2giLCJtY3BTZXJ2ZXJzIiwicHJlZmVyZW5jZXMiLCJzYXZlU2V0dGluZ3MiLCJnZXREZWNyeXB0ZWRBcGlLZXkiLCJwcm92aWRlcklkIiwidmFsaWRhdGVBcGlLZXkiLCJiYXNlVXJsIiwibGVuZ3RoIiwic3RhcnRzV2l0aCIsImV4cG9ydFNldHRpbmdzIiwidmVyc2lvbiIsImV4cG9ydERhdGUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzZXJ2ZXIiLCJlbnYiLCJzYW5pdGl6ZUVudmlyb25tZW50VmFyaWFibGVzIiwidW5kZWZpbmVkIiwiaW1wb3J0U2V0dGluZ3MiLCJleHBvcnREYXRhIiwiY2xlYXJTZW5zaXRpdmVEYXRhIiwiZ2V0U3RhdGlzdGljcyIsInByb3ZpZGVyc1dpdGhLZXlzIiwiZmlsdGVyIiwiZW5hYmxlZE1jcFNlcnZlcnMiLCJzIiwiZW5hYmxlZCIsInRvdGFsUHJvdmlkZXJzIiwidG90YWxNY3BTZXJ2ZXJzIiwibGFzdFVwZGF0ZWQiLCJuYW1lIiwibW9kZWxzIiwic3VwcG9ydHNUb29sQ2FsbGluZyIsIm1heFRva2VucyIsImNvbW1hbmQiLCJhcmdzIiwic3RhdHVzIiwidGhlbWUiLCJsYW5ndWFnZSIsImF1dG9TY3JvbGwiLCJzb3VuZEVuYWJsZWQiLCJta2RpciIsInJlY3Vyc2l2ZSIsImRhdGEiLCJyZWFkRmlsZSIsInBhcnNlZCIsIkpTT04iLCJwYXJzZSIsImNvZGUiLCJzdHJpbmdpZnkiLCJ3cml0ZUZpbGUiLCJzYW5pdGl6ZWQiLCJzZW5zaXRpdmVLZXlzIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwibG93ZXJLZXkiLCJ0b0xvd2VyQ2FzZSIsImlzU2Vuc2l0aXZlIiwic29tZSIsInNlbnNpdGl2ZSIsInNldHRpbmdzTWFuYWdlckluc3RhbmNlIiwiZ2V0U2VjdXJlU2V0dGluZ3NNYW5hZ2VyIiwiaW5pdGlhbGl6ZVNlY3VyZVNldHRpbmdzTWFuYWdlciIsIm1hbmFnZXIiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/services/SecureSettingsManager.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/crypto-js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fsettings%2Froute&page=%2Fapi%2Fsettings%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fsettings%2Froute.ts&appDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fonebird%2Fgithub%2Febook-mcp%2Fmcp-chat-ui%2Fbackend&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();